<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-17T16:58:39+07:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Reviving My Old Laptop</title><link href="http://localhost:4000/posts/laptop-revival" rel="alternate" type="text/html" title="Reviving My Old Laptop" /><published>2022-09-17T00:00:00+07:00</published><updated>2022-09-17T00:00:00+07:00</updated><id>http://localhost:4000/posts/laptop-revival</id><content type="html" xml:base="http://localhost:4000/posts/laptop-revival"><![CDATA[<p>Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?</p>

<!--more-->

<h1 id="background">Background</h1>

<p>The laptop in question is the first gadget that I bought with my own salary. It’s a MacBook Air from early 2015, I bought it back in college in 2017. I’m still a poor college student saving from my part-time jobs back then. For context, nowadays I mainly daily drive my desktop PC and use a company-issued laptop for work. So I’m in no dire need of a laptop, rather it’s more of the sentimental value of the laptop itself.</p>

<p>Also, I’ve encountered some blog posts about how Linus Torvalds is currently using an M2 MacBook with Fedora installed. So, I thought hey if the latest MacBook can run Linux then maybe my old laptop will have no problem. It should be a fun project to do at the weekend!</p>

<h2 id="problems">Problems</h2>

<p>Just as I stated, the laptop is old and kinda unusable in its current state.</p>

<h3 id="battery">Battery</h3>

<p>Most problems of old electronic lies in the battery. At the time, my laptop can only hold for about 10 minutes on battery. So if I want to use it, I need to connect to a wall plug all the time.</p>

<h3 id="storage">Storage</h3>

<p>My laptop only has 128Gb of storage. A “vanilla” macOS Big Sur installation takes about 40-50Gb of storage. Assume that additional basic software takes about 10Gb, it only leaves me with ~60Gb of storage. Not exactly that much by today’s standard.</p>

<h3 id="system-overall">System Overall</h3>

<p>At the time of this writing, macOS Big Sur is released two years <a href="https://en.wikipedia.org/wiki/MacOS_Big_Sur">ago</a> on 12 November 2020. While it still receives updates to this day, if someday Tim Apple decides to drop support for it my laptop is as good as a paperweight. Not to mention the performance is not the best. It’s kinda usable, but I’m not a fan of a laggy machine.</p>

<h1 id="its-revivin-time">It’s Revivin’ Time!</h1>

<p>After making sure that there are no important data saved (my brother was using my laptop for college for a while). I decided to fix the hardware issue first, the battery.</p>

<h2 id="a-new-battery">A New Battery</h2>

<p>Thankfully, the old gen MacBook is relatively easy to fix. A quick read at the iFixit <a href="https://www.ifixit.com/Device/MacBook_Air_13%22_Early_2015">website</a> and unsurprisingly the step is quite a simple DIY project. Unfortunately, looking for the replacement battery itself is not quite easy.</p>

<p>Because of the age of the laptop, looking for the original apple battery is out of the question (not to mention I don’t think they sell spare parts at all). My only choice is to look for an <a href="https://en.wikipedia.org/wiki/Original_equipment_manufacturer">OEM</a> battery from my local marketplace. Luckily for me, some online stores specialise in selling OEM laptop spare parts. After some days, the battery is arrived and ready.</p>

<p>The replacement itself is quite easy. It takes me about 15 minutes just by following instructions on the iFixit website. One thing to note though, apple (for whatever reason) doesn’t use your standard Phillips head screw. So you need a specialise screw to disassemble the laptop, fortunately, my replacement battery comes with the appropriate screwdriver, all good for me!</p>

<p>What I don’t expect is that battery calibration takes some time. It takes me about two days to complete 2 cycles of battery, so take this into the consideration.</p>

<h2 id="the-linux-strike-back">The Linux Strike Back</h2>

<p>I decided to go with <a href="https://spirallinux.github.io/">SpiralLinux</a> for the new OS. It’s a Linux distro based on Debian with some basic configurations and some non-free software and drivers. Truthfully, I’d like to go for Ubuntu if they don’t force snaps on their user. As for fedora, while I like the overall of it, it’s too cutting edge for my taste.</p>

<p>What surprised me is that the installation process itself is not that different from your everyday machine. After attaching the USB installation, I turn on my laptop while holding the <code class="language-plaintext highlighter-rouge">Option</code> key (this is how you choose the boot option on a mac) and then enter the live demo of SpiralLinux. After making sure that everything but the webcam (more on this later) works, I proceed with the installation.</p>

<p>Because I’m not planning to use the macOS anymore, I wipe the whole storage. Hence, the installation process is as simple as clicking next and filling out forms. When the installation is complete, I reboot my laptop and take out the installation USB. When the machine is up, I’m greeted by your standard lightDM login screen. The installation is a success! Surely, there won’t be any problem after this.</p>

<h2 id="return-of-the-problems">Return of the Problems</h2>

<p>Yeah, it’d be too naive to expect that there won’t be any problems. Most blogs that I read said that most likely I’ll encounter an issue with wireless connection. But, I’m able to connect to my home wifi easily. Both on the live USB and after the installation. I think the recent kernel has included the mac wifi driver in it.</p>

<h3 id="touchpad-not-working">Touchpad Not Working</h3>

<p>While on the live demo, I’m able to use the touchpad just fine. But, it’s not working (and not detected even) after the installation. Using an external mouse works just fine though. I suspect that somehow the driver for it is either not installed or configured incorrectly. Thankfully, updating (<code class="language-plaintext highlighter-rouge">apt update &amp;&amp; apt upgrade</code>) and restarting fixes the issue.</p>

<h3 id="webcam-not-working">Webcam Not Working</h3>

<p>I’ve mentioned it before, the webcam is not working at all. This is due to the webcam used by mac doesn’t use your daily standard driver (yeah, no surprise there). Thankfully, I stumbled upon the <a href="https://github.com/patjak/facetimehd/">facetimehd</a> repository by patjak. The repository contains an experimental driver for the MacBook webcam. The <a href="https://github.com/patjak/facetimehd/wiki/Installation">installation</a> process is quite straightforward, it works wonderfully. Besides known issues, I’ve not encountered any other problems.</p>

<h3 id="keyboard-layout">Keyboard Layout</h3>

<p>It’s not a problem per se, but rather a quality of life improvement. As we all know, apple (in their infinite wisdom and apple-centred design™) is using their own keyboard layout which is quite different from the standard keyboard layout. Thankfully (again), a user with the username free5lot has made a <a href="https://github.com/free5lot/hid-apple-patched">repository</a> for solving this “issue”. Goodbye apple-centred design™ layout, welcome sensible standard keyboard layout.</p>

<h2 id="the-config-menace">The Config Menace</h2>

<p>All problems are fixed, it’s time to configure the machine. Now, I’m the kind of guy that has different VM for different occasions. Be it work or personal projects. Hence, I have a pretty complete (for me personally) ansible playbook to be based on. So, configuring is as simple as <code class="language-plaintext highlighter-rouge">$ ansible-pull -U &lt;my_ansible_playbook_repo&gt;</code> for me. Then again, you might be too naive if you think that everything will work without any problems.</p>

<h3 id="the-problem-with-stable">The Problem with Stable</h3>

<p>Debian is stable, which means the available software might be months or even years behind the latest version. Most of the time this is not a problem, but rather an advantage. Because it’ll provide much more stability and fewer unknown issues. But, I forgot that my current project is using <a href="https://docs.gtk.org/gtk4/index.html">GTK4</a> which can be considered a new software and not available on Debian stable.</p>

<p>At this point, I have two options. One, compiling from source. This option is not exactly easy, as I need to compile the dependencies too. Also, gtk4 requires a recent version of Glibc. Which is not quite an easy feat to upgrade from the source. So I go with my second option, using the testing repository.</p>

<p>Debian has three different <a href="https://www.debian.org/doc/manuals/debian-faq/choosing.en.html">repositories</a>. The tl;dr is that new packages are first introduced to <code class="language-plaintext highlighter-rouge">unstable</code>. After some compiling and testing, it will move to <code class="language-plaintext highlighter-rouge">testing</code>. Finally, if all goes well, it will be moved to <code class="language-plaintext highlighter-rouge">stable</code>. Gtk4 is available on both testing and unstable repositories.</p>

<p>While it’s possible to wait until the package is introduced to stable, it’ll take a while. So, I should change the repository. Thankfully, SpiralLinux provides an out-of-the-box way to change <a href="https://github.com/SpiralLinux/SpiralLinux-project/wiki#switching-from-debian-stable-to-the-testing-or-unstable-branch">repository</a>. Though, it’ll take some times to migrate the repository. After it’s done I can install my required packages and finally, my machine is ready to use!</p>

<h1 id="afterword">Afterword</h1>

<p><img src="/assets/images/laptop-revival/macbook_linux.png" alt="My MacBook Linux Desktop" width="100%" /></p>

<p>Now, the storage usage is only about 14Gb, even after installing all of my additional software. The machine is also more snappy and doesn’t turn off without plugging into power. Even though the journey is not exactly smooth, I’m quite happy with the result. Not only the laptop is usable again, but I also learn so much while configuring it.</p>

<p>Well, I’m not exactly solved all of the problems. As currently, I’m not sure how to dispose of the old battery. I’ve found <code class="language-plaintext highlighter-rouge">octopus</code>, an Indonesian-based startup that handles e-waste. But, I haven’t tried it yet. Maybe I’ll make a review after trying it. In the meantime, please let me know if you have any information on e-waste disposal in Indonesia. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?]]></summary></entry><entry><title type="html">GTK4 Cursor Manipulation</title><link href="http://localhost:4000/posts/gtk4-cursor" rel="alternate" type="text/html" title="GTK4 Cursor Manipulation" /><published>2022-06-02T00:00:00+07:00</published><updated>2022-06-02T00:00:00+07:00</updated><id>http://localhost:4000/posts/gtk4-cursor</id><content type="html" xml:base="http://localhost:4000/posts/gtk4-cursor"><![CDATA[<p>A cursor can be used as a visual hint to users on how can they interact with an app. 
<!--more-->
For example, for a <code class="language-plaintext highlighter-rouge">pointer</code> cursor, it is implied that an element is clickable. 
<code class="language-plaintext highlighter-rouge">Progress</code> cursor indicates that the application is currently working, and the user should wait.</p>

<p>In this post, we’ll look at various method we can use to modify cursor in GTK4.</p>

<h2 id="change-cursor-on-hover">Change Cursor on Hover</h2>

<p>This usecase is used to give users a hint on how they can interact with an application element. In example <code class="language-plaintext highlighter-rouge">pointer</code> cursor over a button, <code class="language-plaintext highlighter-rouge">text</code> cursor over a text input, and so on.</p>

<p>Thankfully, unlike in GTK3, we can invoke a function call to set this instead of setting up the event manually. We have two functions for this:</p>
<ul>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor.html">gtk_widget_set_cursor</a></li>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor_from_name.html">gtk_widget_set_cursor_from_name</a></li>
</ul>

<h3 id="gtk_widget_set_cursor">gtk_widget_set_cursor</h3>

<p>This function took 2 parameters. Widget pointer and cursor object. 
The Widget parameter is straightforward, it is the widget that we are going to give the hover cursor.
The cursor parameter is a gdk object and it is nullable. In case the parameter is null, it will use the default cursor.</p>

<p>Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me"</span><span class="p">);</span>
<span class="n">GdkCursor</span> <span class="o">*</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">gdk_cursor_new_from_name</span><span class="p">(</span><span class="s">"pointer"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="n">cursor</span><span class="p">);</span>
</code></pre></div></div>

<p>Above, we created a new button and cursor. 
The cursor is a gdk object with a pointer as the cursor. 
You can refer to the <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_name.html">gdk documentation</a> for the list of available cursor names. 
Alternatively, you can use a custom image as a cursor with <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_texture.html">gdk_cursor_new_from_texture</a>.</p>

<blockquote>
  <p>Note: if you are developing in <a href="https://wiki.gnome.org/Apps/Builder">Gnome Builder</a> the cursor might not be changed if you run your project using the gui apps (<code class="language-plaintext highlighter-rouge">ctrl+f5</code>).
You need to export the bundle and then run it manually (or install the exported flatpak project first) to make it work.</p>
</blockquote>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor.mp4" type="video/mp4" />
</video>

<p>As you can see the cursor is automatically changed to pointer once it’s hovering on the button. In the next section, we’ll look at how to simplify this process even more.</p>

<h3 id="gtk_widget_set_cursor_from_name">gtk_widget_set_cursor_from_name</h3>

<p>GTK has provided us with a shortcut for the above snippet. Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me simple"</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">gtk_widget_set_cursor_from_name</code> we can simply provide the cursor type name, without any need to create the cursor object ourselves.
Take note that the cursor name is nullable. In this case, the widget will use the cursor inherited from the parent widget.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor_with_name.mp4" type="video/mp4" />
</video>

<h2 id="change-cursor-for-window">Change Cursor for Window</h2>

<p>In GTK3 we have <a href="https://docs.gtk.org/gdk3/method.Window.set_cursor.html">gdk_window_set_cursor</a> which will change the cursor for a given window.
It’s been <a href="https://docs.gtk.org/gtk4/migrating-3to4.html#adapt-to-cursor-api-changes">deprecated</a> in GTK4. Instead, we can use the function above by passing the window as our widget.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkWidget</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="n">gtk_application_window_new</span> <span class="p">(</span><span class="n">app</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>As you can see, there’s no different than the previous snippet. The only difference is that we pass the window as a widget in exchange for the previous button.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/window.mp4" type="video/mp4" />
</video>

<hr />

<p>To be completely honest, I choose this topic because I have spent hours debugging my project. 
Before I realize that the cursor won’t be changed if you run it inside the gnome-builder lol.
Hopefully, this post can help you to avoid repeating my mistake. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[A cursor can be used as a visual hint to users on how can they interact with an app.]]></summary></entry><entry><title type="html">Hello World!</title><link href="http://localhost:4000/posts/hello-world" rel="alternate" type="text/html" title="Hello World!" /><published>2022-05-29T00:00:00+07:00</published><updated>2022-05-29T00:00:00+07:00</updated><id>http://localhost:4000/posts/hello-world</id><content type="html" xml:base="http://localhost:4000/posts/hello-world"><![CDATA[<p>Welcome to my blog’s first post!
<!--more--></p>

<p>I was working on my project the other day. I’m working on a desktop GUI project, which is not as popular as a web project nowadays. As a result, there are not that many online sources that I can refer to while working on it (not to mention the official documentation is not that good). So I was thinking, hey I should write this up so I can help my future self. While I’m at it I also think that writing it in a blog maybe is not a bad idea!</p>

<p>As you can see, my blog is a bit bare. I’m inspired by <a href="https://motherfuckingwebsite.com/">this website</a> for the design. Also, because it’s mainly just for my note I think it’s good to keep things simple and lightweight. Please let me know if you have any suggestions!</p>

<p>For now, I plan to write some posts related to desktop GUI software. More specifically on GTK and C. Please note that I’m not a professional C engineer by any means (I write java for a living, like your everyday software engineer). So, I’m sorry if most of my post only consists of surface-level knowledge or even contains any errors. Please let me know if that happened. You can send me an <a href="mailto:contact@matiasalvin.dev">email</a> or contact me on my socials.</p>

<p>So, as I’ve already mentioned. This blog will be mainly used as my notes on my software engineer journeys. Also, I’m not a native speaker. Hopefully, by writing a lot of English I can be better at my English. Thank you, and I hope you enjoy your stay here!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Welcome to my blog’s first post!]]></summary></entry></feed>