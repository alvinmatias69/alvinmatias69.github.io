<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-01-22T22:15:09+07:00</updated><id>/feed.xml</id><entry><title type="html">Dipping My Toe into Elixir</title><link href="/posts/dipping-my-toe-into-elixir" rel="alternate" type="text/html" title="Dipping My Toe into Elixir" /><published>2025-01-22T00:00:00+07:00</published><updated>2025-01-22T00:00:00+07:00</updated><id>/posts/dipping-my-toe-into-elixir</id><content type="html" xml:base="/posts/dipping-my-toe-into-elixir"><![CDATA[<p>Elixir is a functional programming language that promise both scalability and great fault-tolerance.
It also provides great tools to support development.
But how much does elixir live up to their promise?</p>

<!--more-->

<p>In this post, we will create a theoretical chatbot using elixir.
The chatbot will read user messages and will be triggered if the message contain url with tracking query in it.
Then, the cleaned up url will be sent accordingly.</p>

<blockquote>
  <p>The reason the project is a theoretical chat bot is to reduce complexity and focus on the basic implementation.
Most chat services require bot to be verified before it can read user messages, which also complicates things.
For this project I hack together a simple broadcast websocket server.
You can take a look at the server implementation <a href="https://github.com/alvinmatias69/anti_tracking_ws">here</a>.</p>
</blockquote>

<p>While I’m not going to write into too much detail, I’ll outline some important aspects that I’ve encountered while writing this project.
Also for context, I’m not entirely unfamiliar with elixir as I’ve used it before at my job.
But, it’s the first time I’ve written a complete elixir project from scratch.
So, please takes this post with a grain of salt.</p>

<p>You can check the completed project on my <a href="https://github.com/alvinmatias69/anti_tracking/">github</a>.</p>

<h1 id="preparation">Preparation</h1>

<p>There are two ways to install elixir on your system. 
Either you install elixir through your package manager (e.g. apt, dnf, etc) or use language version manager, in this case asdf.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># clone asdf core</span>
<span class="nv">$ </span>git clone https://github.com/asdf-vm/asdf.git ~/.asdf

<span class="c"># add asdf to shell</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'. "$HOME/.asdf/asdf.sh"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="c"># or zsh</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'. "$HOME/.asdf/asdf.sh"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div>

<p>Because elixir is built on top of erlang, we also need to install erlang. Fortunately asdf also support erlang.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install erlang</span>
<span class="nv">$ </span>asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
<span class="nv">$ </span>asdf <span class="nb">install </span>erlang latest

<span class="c"># install elixir</span>
<span class="nv">$ </span>asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
<span class="nv">$ </span>asdf <span class="nb">install </span>elixir latest
</code></pre></div></div>

<p>Check the elixir version to make sure it’s installed correctly.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>elixir <span class="nt">--version</span>
</code></pre></div></div>

<p>Take a look at the official documentation for further information.</p>
<ul>
  <li><a href="https://github.com/asdf-vm/asdf">asdf</a></li>
  <li><a href="https://github.com/asdf-vm/asdf-erlang">asdf-erlang</a></li>
  <li><a href="https://github.com/asdf-vm/asdf-elixir">asdf-elixir</a></li>
</ul>

<h2 id="code-editor">Code Editor</h2>

<p>Personally, I use emacs. Doom emacs specifically.
It already comes with support for elixir, with a few configs and tweaks we are ready to go.</p>

<div class="language-lisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;; uncomment this on your .doom.d/init.el config file</span>
<span class="p">(</span><span class="nv">elixir</span> <span class="nv">+lsp</span> <span class="nv">+tree-sitter</span><span class="p">)</span>
</code></pre></div></div>

<p>Refer to the elixir module doom emacs <a href="https://github.com/doomemacs/doomemacs/tree/master/modules/lang/elixir">documentation</a> for further read.</p>

<h1 id="project-structure">Project Structure</h1>

<p>The project is an elixir umbrella project consist of 3 applications.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Storages</code></li>
  <li><code class="language-plaintext highlighter-rouge">Web</code></li>
  <li><code class="language-plaintext highlighter-rouge">Bot</code></li>
</ul>

<p>First, let’s initiate the project.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>mix new anti_tracking <span class="nt">--umbrella</span>
</code></pre></div></div>

<p>Mix is a build tool to help manage elixir project. 
It’s installed automatically when we install elixir on our machine.</p>

<p>A directory named <code class="language-plaintext highlighter-rouge">anti_tracking</code> will be created.
Inside, we have a Mix project named <code class="language-plaintext highlighter-rouge">AntiTracking</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">--umbrella</code> parameter indicates that the generated project will be an umbrella project.
Umbrella project is a term used in elixir for a monorepo project.
Each applications in the umbrella project will share configurations and dependencies.
Check the mix <a href="https://hexdocs.pm/mix/1.12/Mix.html">documentation</a> for further details.</p>

<h2 id="storages">Storages</h2>

<p>Storages application is responsible for handling data.
Similarly, we’re going to use <code class="language-plaintext highlighter-rouge">Mix</code> to initiate the application.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>anti_tracking/apps
<span class="c"># create the application</span>
<span class="nv">$ </span>mix new storages <span class="nt">--sup</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">--sup</code> parameter will create a supervised application.
You can refer to the official <a href="https://hexdocs.pm/elixir/1.12/Supervisor.html">documentation</a> for details.
The short explanation is that the project will be run in persistent mode and restarted if the child process crashed.</p>

<p>Back to the storages, let’s take a quick look at the application.
The main purpose of this application is to serve as source of truth for the whole project.
The data itself are web domains and its list of query parameters that known to be a tracker.
Those data will be stored in both database (postgresQL) and simple in-memory cache.
The application also comes with an interface to query and modify the data.</p>

<p><img src="/assets/images/elixir-quickstart/storages_uml.png" alt="Storages UML" width="100%" /></p>

<p>The cache is a simple genserver with map as the state.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Cache</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">GenServer</span>
  <span class="o">...</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">init</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%{}}</span>
  <span class="k">end</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">handle_call</span><span class="p">({</span><span class="ss">:lookup</span><span class="p">,</span> <span class="n">site_name</span><span class="p">},</span> <span class="n">_from</span><span class="p">,</span> <span class="n">cache</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">case</span> <span class="no">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">cache</span><span class="p">,</span> <span class="n">site_name</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">parameters</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:reply</span><span class="p">,</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">parameters</span><span class="p">),</span> <span class="n">cache</span><span class="p">}</span>
      <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:reply</span><span class="p">,</span> <span class="p">[],</span> <span class="n">cache</span><span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>While implementing the cache using genserver might create a bottleneck, the traffic and operation in this module is quite lightweight.
In case that this approach is not performed enough, we can substitute this module with a proper cache (e.g. redis) to avoid bottleneck.</p>

<p>The database is an interface to postgresql database through <a href="https://github.com/elixir-ecto/ecto">Ecto</a> library.
Ecto is an ORM library for elixir that comes with handy tools (even migration included, so cool!) and extensive documentation.
Adding the dependencies is quite straightforward.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Mix.exs</span>
<span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span>
  <span class="p">[</span>
    <span class="p">{</span><span class="ss">:ecto_sql</span><span class="p">,</span> <span class="s2">"~&gt; 3.0"</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:postgrex</span><span class="p">,</span> <span class="s2">"&gt;= 0.0.0"</span><span class="p">}</span>
  <span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>While I’m not really a fans of ORM, using Ecto is very simple and easy to understand.
You can check their getting started <a href="https://hexdocs.pm/ecto/getting-started.html">documentation</a> yourself.</p>

<p>According to Ecto convention, each table is defined in their own module.
Also following that, we will put related functions (e.g. fetching ane updating data) on each table module accordingly.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Site</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span>
  <span class="kn">require</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span>
  <span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span>
  <span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span>

  <span class="n">schema</span> <span class="s2">"sites"</span> <span class="k">do</span>
    <span class="n">field</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">)</span>
    <span class="n">many_to_many</span><span class="p">(</span><span class="ss">:parameters</span><span class="p">,</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Parameter</span><span class="p">,</span> <span class="ss">join_through:</span> <span class="s2">"site_parameters"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nv">@spec</span> <span class="n">get_or_insert</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="p">%</span><span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span><span class="p">{}}</span> <span class="o">|</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">integer</span><span class="p">()}</span>
  <span class="k">def</span> <span class="n">get_or_insert</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">do</span>
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Last but not least, the main <code class="language-plaintext highlighter-rouge">Storages</code> module.
This module is the interface that will serves logic to handle the data.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Storages</span> <span class="k">do</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="nv">@spec</span> <span class="n">insert</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">(),</span> <span class="p">[</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()],</span> <span class="p">{</span><span class="ss">:update_cache</span><span class="p">,</span> <span class="no">true</span><span class="p">})</span> <span class="p">::</span>
          <span class="p">{</span><span class="ss">:server_error</span><span class="p">,</span> <span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()}</span> <span class="o">|</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">()}</span> <span class="o">|</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">insert</span><span class="p">(</span><span class="n">site_name</span><span class="p">,</span> <span class="n">parameter_names</span><span class="p">,</span> <span class="p">{</span><span class="ss">:update_cache</span><span class="p">,</span> <span class="no">true</span><span class="p">})</span> <span class="k">do</span>
    <span class="k">case</span> <span class="n">insert</span><span class="p">(</span><span class="n">site_name</span><span class="p">,</span> <span class="n">parameter_names</span><span class="p">)</span> <span class="k">do</span>
      <span class="ss">:ok</span> <span class="o">-&gt;</span>
        <span class="no">Storages</span><span class="o">.</span><span class="no">Cache</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">site_name</span><span class="p">,</span> <span class="n">parameter_names</span><span class="p">)</span>
        <span class="ss">:ok</span>
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Interaction to the <code class="language-plaintext highlighter-rouge">Storages</code> application, be it from another application or interactive shell (more on this later) will be started from this module.</p>

<p>Because we want the application to start (and supervise) both services during startup, they needed to be added to the application children list.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Application</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="no">false</span>

  <span class="kn">use</span> <span class="no">Application</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">children</span> <span class="o">=</span> <span class="p">[</span>
      <span class="no">Storages</span><span class="o">.</span><span class="no">Repo</span><span class="p">,</span>
      <span class="p">{</span><span class="no">Storages</span><span class="o">.</span><span class="no">Cache</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Cache</span><span class="p">}</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="o">=</span> <span class="p">[</span><span class="ss">strategy:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Supervisor</span><span class="p">]</span>
    <span class="no">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>All done for the <code class="language-plaintext highlighter-rouge">Storages</code> application.
Now, let’s test this using elixir interactive shell (<code class="language-plaintext highlighter-rouge">iex</code>).</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>iex <span class="nt">-S</span> mix

iex<span class="o">(</span>1<span class="o">)&gt;</span> Storages.get<span class="o">(</span><span class="s2">"google.com"</span><span class="o">)</span>
<span class="o">[</span><span class="s2">"utm_params"</span>, <span class="s2">"utm_sources"</span>, <span class="s2">"utm_campaign"</span><span class="o">]</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">iex</code> command will execute elixir REPL in the current terminal.
The <code class="language-plaintext highlighter-rouge">-S mix</code> argument will tell the <code class="language-plaintext highlighter-rouge">iex</code> to start the current mix project and attach the shell to the project.
From the shell, we can execute modules and functions included in the project.
Pretty useful for testing, even more the shell can reload code changes without needed to restart.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex<span class="o">(</span>1<span class="o">)&gt;</span> recompile<span class="o">()</span>
</code></pre></div></div>

<p>In my opinion, this is one of the coolest feature of elixir.
This make iterating very simple.</p>

<h2 id="web">Web</h2>

<p>Web application will serve as an interface to modify the bot data.
With a simple authentication, the ‘bot admin’ can easily modifying the data without needed to update the database (or cache) directly.
Just like with the <code class="language-plaintext highlighter-rouge">Storages</code>, we’re going to create a new supervised application.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>mix new web <span class="nt">--sup</span>
</code></pre></div></div>

<p>The application itself is pretty simple, it will handle user input through web interface and pass that to our <code class="language-plaintext highlighter-rouge">Storages</code> app.
For this application we’re utilizing three libraries:</p>
<ul>
  <li><a href="https://github.com/elixir-plug/plug">Plug</a>: building blocks for composing web using elixir functions.</li>
  <li><a href="https://github.com/mtrudel/bandit">Bandit</a>: lightweight elixir http server.</li>
  <li><a href="https://github.com/mtrudel/bandit">Poison</a>: json parser.</li>
</ul>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Mix.exs</span>
  <span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span>
    <span class="p">[</span>
      <span class="p">{</span><span class="ss">:bandit</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:poison</span><span class="p">,</span> <span class="s2">"~&gt; 6.0"</span><span class="p">},</span>
      <span class="p">{</span><span class="ss">:storages</span><span class="p">,</span> <span class="ss">in_umbrella:</span> <span class="no">true</span><span class="p">}</span>
    <span class="p">]</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Because the web will call storages application to fetch or modify data, it needs to be added in the dependency list.
Notice that instead of version, we put <code class="language-plaintext highlighter-rouge">in_umbrella: true</code>.
This will tell mix that this certain dependency is reside within the same project.</p>

<p>The bandit dependency is already include plug in it.
While bandit is responsible for the heavylifting of the webserver, plug will handle and ‘glue’ our application.
Let’s talk a bit about plug.</p>

<p>Plug, the heart of this application is so powerful yet so simple.
So much that it deserved a writeup on its own.
To put it simply, by utilizing Plug we can create a simple webserver and focus on the business logic (akin to Express of nodejs).</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Web</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Router</span>

  <span class="n">plug</span><span class="p">(</span><span class="ss">:match</span><span class="p">)</span>
  <span class="n">plug</span><span class="p">(</span><span class="no">Plug</span><span class="o">.</span><span class="no">Logger</span><span class="p">)</span>
  <span class="n">plug</span><span class="p">(</span><span class="ss">:dispatch</span><span class="p">)</span>

  <span class="n">get</span> <span class="s2">"/ping"</span> <span class="k">do</span>
    <span class="n">send_resp</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="s2">"pong"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">forward</span><span class="p">(</span><span class="s2">"/tracker"</span><span class="p">,</span> <span class="ss">to:</span> <span class="no">Web</span><span class="o">.</span><span class="no">TrackerRouter</span><span class="p">)</span>

  <span class="n">match</span> <span class="n">_</span> <span class="k">do</span>
    <span class="n">send_resp</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="mi">404</span><span class="p">,</span> <span class="s2">"not found"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You might notice that the module doesn’t follow the elixir standard of function definition.
It’s because Plug heavily utilizing macro to make defining path clearer.</p>

<p>On the <code class="language-plaintext highlighter-rouge">Web.TrackerRouter</code> module, we handle user inputs.
Including authenticating request, json serialize and deserializing, and function to <code class="language-plaintext highlighter-rouge">Storages</code> application invocation.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Web</span><span class="o">.</span><span class="no">TrackerRouter</span> <span class="k">do</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="kn">use</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Router</span>

  <span class="n">plug</span><span class="p">(</span><span class="ss">:match</span><span class="p">)</span>

  <span class="kn">import</span> <span class="no">Plug</span><span class="o">.</span><span class="no">BasicAuth</span>

  <span class="n">plug</span><span class="p">(</span><span class="ss">:basic_auth</span><span class="p">,</span>
    <span class="ss">username:</span> <span class="no">Application</span><span class="o">.</span><span class="n">compile_env</span><span class="p">(</span><span class="ss">:web</span><span class="p">,</span> <span class="ss">:username</span><span class="p">),</span>
    <span class="ss">password:</span> <span class="no">Application</span><span class="o">.</span><span class="n">compile_env</span><span class="p">(</span><span class="ss">:web</span><span class="p">,</span> <span class="ss">:password</span><span class="p">)</span>
  <span class="p">)</span>

  <span class="n">plug</span><span class="p">(</span><span class="no">Plug</span><span class="o">.</span><span class="no">Parsers</span><span class="p">,</span> <span class="ss">parsers:</span> <span class="p">[</span><span class="ss">:json</span><span class="p">],</span> <span class="ss">json_decoder:</span> <span class="no">Poison</span><span class="p">)</span>

  <span class="n">plug</span><span class="p">(</span><span class="ss">:dispatch</span><span class="p">)</span>

  <span class="n">get</span> <span class="s2">"/:site_name"</span> <span class="k">do</span>
    <span class="n">payload</span> <span class="o">=</span>
      <span class="p">%{</span><span class="ss">parameters:</span> <span class="no">Storages</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">site_name</span><span class="p">)}</span>
      <span class="o">|&gt;</span> <span class="no">Poison</span><span class="o">.</span><span class="n">encode!</span><span class="p">()</span>

    <span class="n">conn</span>
    <span class="o">|&gt;</span> <span class="n">send_json_response</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Last, we need to define our child application.
But unlike last time, we’re going to add bandit as the child instead of our module directly.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Web</span><span class="o">.</span><span class="no">Application</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="no">false</span>

  <span class="kn">use</span> <span class="no">Application</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">children</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span><span class="no">Bandit</span><span class="p">,</span> <span class="ss">plug:</span> <span class="no">Web</span><span class="p">,</span> <span class="ss">scheme:</span> <span class="ss">:http</span><span class="p">,</span> <span class="ss">port:</span> <span class="no">Application</span><span class="o">.</span><span class="n">fetch_env!</span><span class="p">(</span><span class="ss">:web</span><span class="p">,</span> <span class="ss">:port</span><span class="p">)}</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="o">=</span> <span class="p">[</span><span class="ss">strategy:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Web</span><span class="o">.</span><span class="no">Supervisor</span><span class="p">]</span>
    <span class="no">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is the advantage of using plug (and bandit in this case).
Most of the time, we can simply implement plug as we need and all other heavylifting of the web will be handled by the library, neat!</p>

<blockquote>
  <p>You might notice that in the last 2 code snippet, we have code that seems to fetch environment variable.
That isn’t quite accurate as it actually fetching configuration of the current environment.
More on that later, but for now all you need to know that those code fetching the value from a configuration file.</p>
</blockquote>

<p>Let’s test this, shall we.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>iex <span class="nt">-S</span> mix

<span class="o">[</span>info] Running Web with Bandit 1.6.1 at 0.0.0.0:8080 <span class="o">(</span>http<span class="o">)</span>
Erlang/OTP 26 <span class="o">[</span>erts-14.2.3] <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>64-bit] <span class="o">[</span>smp:4:4] <span class="o">[</span>ds:4:4:10] <span class="o">[</span>async-threads:1] <span class="o">[</span>jit:ns
</code></pre></div></div>

<p>Because both applications reside in a same umbrella project, we don’t need to start each application individually.
And we can test that the webserver is working by invoking a simple curl.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl localhost:8080/tracker/www.google.com <span class="se">\</span>
   <span class="nt">-H</span> <span class="s2">"Authorization: Basic aGVsbG86d29ybGQ="</span>

<span class="o">{</span><span class="s2">"parameters"</span>:[<span class="s2">"utm_params"</span>, <span class="s2">"utm_sources"</span>, <span class="s2">"utm_campaign"</span><span class="o">]}</span>%
</code></pre></div></div>

<h2 id="bot">Bot</h2>

<p>The bot application is the core of the project.
This application will connect to a webserver and handle all received messages.
Supposed the message contains known url with tracking parameters, the bot will then send the url with all tracking parameters removed.</p>

<p>We’re using <a href="https://github.com/Azolo/websockex">Websockex</a>, an elixir websocket client.
The library is choosen due to their API that resembled elixir genserver.
Thus, make the application more familiar and easy to work with.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Bot</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">WebSockex</span>
  <span class="kn">require</span> <span class="no">Logger</span>

  <span class="k">def</span> <span class="n">start_link</span><span class="p">(</span><span class="n">opts</span> <span class="p">\\</span> <span class="p">[])</span> <span class="k">do</span>
    <span class="no">WebSockex</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="no">Keyword</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="ss">:url</span><span class="p">),</span> <span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:state</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nv">@spec</span> <span class="n">cast_message</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">cast_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">"casting message: </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
    <span class="no">WebSockex</span><span class="o">.</span><span class="n">cast</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="o">...</span>

  <span class="k">def</span> <span class="n">handle_frame</span><span class="p">({</span><span class="ss">:text</span><span class="p">,</span> <span class="n">message</span><span class="p">},</span> <span class="n">state</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Task</span><span class="o">.</span><span class="no">Supervisor</span><span class="o">.</span><span class="n">start_child</span><span class="p">(</span><span class="no">Bot</span><span class="o">.</span><span class="no">TaskSupervisor</span><span class="p">,</span> <span class="no">Bot</span><span class="o">.</span><span class="no">MessageHandler</span><span class="p">,</span> <span class="ss">:handle</span><span class="p">,</span> <span class="p">[</span><span class="n">message</span><span class="p">])</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The nature of a chat bot requires them to handle big stream of messages.
Hence, we’re utilizing task to handle each message.
<a href="https://hexdocs.pm/elixir/Task.html">Task</a> is a convenient way to spawn a process in elixir (similar to goroutine of golang).
By using task supervisor, we can even retry the task in the event of error or failure.
Because each message handled by different process, the main process won’t be blocked and the bot can handle multiple messages ‘concurrently’.</p>

<p>Concurrently in a quote due to the nature of the websocket client library itself.
While the message is processed concurrently, sending it back to the server can only be done using a single connection.
Making the websocket connection being the bottleneck.
And it might be a good thing, because most chat servers has a rate limit.
Breaking that and our bot might be timed out or worse getting banned.
To prevent that, we might also need to implement rate limiter for message sent.
But, because we’re only implementing this for a theoretical chat server, current implementation is sufficient.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Bot</span><span class="o">.</span><span class="no">MessageHandler</span> <span class="k">do</span>
  <span class="nv">@spec</span> <span class="n">handle</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">t</span><span class="p">())</span> <span class="p">::</span> <span class="no">nil</span> <span class="o">|</span> <span class="ss">:ok</span>
  <span class="k">def</span> <span class="n">handle</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">message</span>
    <span class="o">...</span>
    <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cleanup_uri</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
    <span class="o">...</span>
    <span class="o">|&gt;</span> <span class="n">send</span><span class="p">()</span>
  <span class="k">end</span>

  <span class="k">defp</span> <span class="n">cleanup_uri</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">%</span><span class="no">URI</span><span class="p">{</span><span class="ss">host:</span> <span class="n">host</span><span class="p">,</span> <span class="ss">query:</span> <span class="n">query</span><span class="p">}</span> <span class="o">=</span> <span class="n">uri</span>
    <span class="n">query</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">decode_query</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>

    <span class="n">cleaned_query</span> <span class="o">=</span>
      <span class="no">Storages</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="p">{</span><span class="ss">:with_cache</span><span class="p">,</span> <span class="no">true</span><span class="p">})</span>
      <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="k">fn</span> <span class="n">item</span><span class="p">,</span> <span class="n">acc</span> <span class="o">-&gt;</span>
        <span class="no">Map</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">acc</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
      <span class="k">end</span><span class="p">)</span>
    <span class="o">...</span>
  <span class="k">end</span>
  
  <span class="o">...</span>
  
  <span class="k">defp</span> <span class="n">send</span><span class="p">(</span><span class="n">uris</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">uris</span>
    <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="s2">"Here's your cleaned up urls:"</span><span class="p">,</span> <span class="k">fn</span> <span class="n">item</span><span class="p">,</span> <span class="n">acc</span> <span class="o">-&gt;</span>
      <span class="n">acc</span> <span class="o">&lt;&gt;</span> <span class="s2">"</span><span class="se">\n</span><span class="s2"> - "</span> <span class="o">&lt;&gt;</span> <span class="no">URI</span><span class="o">.</span><span class="n">to_string</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="k">end</span><span class="p">)</span>
    <span class="o">|&gt;</span> <span class="no">Bot</span><span class="o">.</span><span class="n">cast_message</span><span class="p">()</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The handler implementation itself is quite straightforward.
We parse the message, and if it contains a known url with tracking parameters we send it back with the cleaned up url.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">Bot</span><span class="o">.</span><span class="no">Application</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="no">false</span>

  <span class="kn">use</span> <span class="no">Application</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">children</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span><span class="no">Task</span><span class="o">.</span><span class="no">Supervisor</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Bot</span><span class="o">.</span><span class="no">TaskSupervisor</span><span class="p">},</span>
      <span class="p">{</span><span class="no">Bot</span><span class="p">,</span> <span class="p">[</span><span class="ss">async:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Bot</span><span class="p">,</span> <span class="ss">url:</span> <span class="no">Application</span><span class="o">.</span><span class="n">fetch_env!</span><span class="p">(</span><span class="ss">:bot</span><span class="p">,</span> <span class="ss">:url</span><span class="p">)]}</span>
    <span class="p">]</span>

    <span class="n">opts</span> <span class="o">=</span> <span class="p">[</span><span class="ss">strategy:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">Bot</span><span class="o">.</span><span class="no">Supervisor</span><span class="p">]</span>
    <span class="no">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Same as before, we register our supervised module in our application module.
Notice that we also register the task supervisor despite not having the module in the application.
It’s due to the nature of the supervisor module, we can simply started it and give it a name.
We can also add some options to handle error events, but let’s keep it simple for now.</p>

<h1 id="get-it-running">Get It Running!</h1>

<p>Everything is done, let’s try out our project.</p>

<video preload="auto" controls="controls" autoplay="autoplay" loop="loop" width="80%" height="auto">
    <source src="/assets/videos/elixir_quickstart/demo.mp4" type="video/mp4" />
</video>

<p>As we can see, our bot will react to message with known url and tracking parameter.
It won’t reply to message without url or url without tracking parameter.</p>

<p>Now, to the last and most important part of the project, deployment.</p>

<h2 id="deployment">Deployment</h2>

<p>We need to add some informations to our root <code class="language-plaintext highlighter-rouge">mix.exs</code> file before we can start the deployment.</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">AntiTracking</span><span class="o">.</span><span class="no">MixProject</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Project</span>

  <span class="k">def</span> <span class="n">project</span> <span class="k">do</span>
    <span class="p">[</span>
      <span class="ss">apps_path:</span> <span class="s2">"apps"</span><span class="p">,</span>
      <span class="ss">version:</span> <span class="s2">"0.1.0"</span><span class="p">,</span>
      <span class="ss">start_permanent:</span> <span class="no">Mix</span><span class="o">.</span><span class="n">env</span><span class="p">()</span> <span class="o">==</span> <span class="ss">:prod</span><span class="p">,</span>
      <span class="ss">deps:</span> <span class="n">deps</span><span class="p">(),</span>
      <span class="ss">releases:</span> <span class="p">[</span>
        <span class="ss">bot:</span> <span class="p">[</span>
          <span class="ss">version:</span> <span class="s2">"0.0.1"</span><span class="p">,</span>
          <span class="ss">include_executables_for:</span> <span class="p">[</span><span class="ss">:unix</span><span class="p">],</span>
          <span class="ss">applications:</span> <span class="p">[</span>
            <span class="ss">web:</span> <span class="ss">:permanent</span><span class="p">,</span> 
            <span class="ss">storages:</span> <span class="ss">:permanent</span><span class="p">,</span> 
            <span class="ss">bot:</span> <span class="ss">:permanent</span>
          <span class="p">]</span>
        <span class="p">]</span>
      <span class="p">]</span>
    <span class="p">]</span>
  <span class="k">end</span>
  <span class="o">...</span> 
<span class="k">end</span>
</code></pre></div></div>

<p>We need to define the applications included in the release.
If desired we can define multiple releases with different applications (e.g. release only web application, etc).</p>

<p>You might notice that we set the <code class="language-plaintext highlighter-rouge">start_permanent</code> key with comparison to environment and atom <code class="language-plaintext highlighter-rouge">:prod</code>.
This key will determine whether to crash the erlang vm when the application supervisor tree shutdown, we don’t want this to happen in development as the stacktraces are important to debugging.
But, what is the environment being referred here?
Let’s take a quick detour.</p>

<h3 id="environment">Environment</h3>

<p>By default, our mix project is run on <code class="language-plaintext highlighter-rouge">:dev</code> environment.
We can set this by passing <code class="language-plaintext highlighter-rouge">MIX_ENV</code> variable.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ MIX_ENV</span><span class="o">=</span>prod iex <span class="nt">-S</span> mix
</code></pre></div></div>

<p>Mix support three environments out of the box: <code class="language-plaintext highlighter-rouge">:dev</code>, <code class="language-plaintext highlighter-rouge">:test</code>, and <code class="language-plaintext highlighter-rouge">:prod</code>.
Those environments should be self explanatory. 
Other than setting various compiler config (debug artifacts, etc), environment also used to set project configuration.</p>

<h4 id="configuration">Configuration</h4>

<p>Configuration is a module that used to define project configuration.
Typically, it reside in <code class="language-plaintext highlighter-rouge">config/config.exs</code> file.
But it’s configurable through application <code class="language-plaintext highlighter-rouge">Mix.exs</code> file in <code class="language-plaintext highlighter-rouge">config_path</code> key (for umbrella project, this is defined on each application mix file).</p>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="no">Config</span>

<span class="n">config</span> <span class="ss">:storages</span><span class="p">,</span> <span class="ss">ecto_repos:</span> <span class="p">[</span><span class="no">Storages</span><span class="o">.</span><span class="no">Repo</span><span class="p">]</span>
<span class="n">import_config</span> <span class="s2">"</span><span class="si">#{</span><span class="n">config_env</span><span class="p">()</span><span class="si">}</span><span class="s2">.exs"</span>
</code></pre></div></div>

<p>Other than config data for ecto, we can see that the config file will import another config file with current environment as the filename.
This enable per environment configuration, pretty helpful for separating configuration for different scenario (e.g. development and testing).
For production, it’s a good practice not to commit the configuration value.
Instead, configuration values will be defined from environment variables.
(In the real word though, usually the production config values are set using more sophisticated way like kubeseal. Which in turn will set the production machine environment variables).</p>

<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="no">Config</span>

<span class="n">config</span> <span class="ss">:storages</span><span class="p">,</span> <span class="no">Storages</span><span class="o">.</span><span class="no">Repo</span><span class="p">,</span>
  <span class="ss">database:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"DB_NAME"</span><span class="p">),</span>
  <span class="ss">username:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"DB_USERNAME"</span><span class="p">),</span>
  <span class="ss">password:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"DB_PASSWORD"</span><span class="p">),</span>
  <span class="ss">hostname:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"DB_HOST"</span><span class="p">)</span>

<span class="n">config</span> <span class="ss">:web</span><span class="p">,</span>
  <span class="ss">port:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"WEB_PORT"</span><span class="p">),</span>
  <span class="ss">username:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"WEB_USERNAME"</span><span class="p">),</span>
  <span class="ss">password:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"WEB_PASSWORD"</span><span class="p">)</span>

<span class="n">config</span> <span class="ss">:bot</span><span class="p">,</span>
  <span class="ss">url:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"BOT_WS_URL"</span><span class="p">)</span>
</code></pre></div></div>

<p>There’s a “gotcha” for this approach.
In elixir, by default all configuration value is determine while compiling.
Which mean, if we set configuration values while both compiling and running, the one used will be the one set while compiling.
For configuration that set during runtime, we need to set it on <code class="language-plaintext highlighter-rouge">config/runtime.exs</code> instead.</p>

<p>Now we have learn about environment and configuration.
Let’s create our first production release for AntiTracking bot.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">export </span><span class="nv">DB_NAME</span><span class="o">=</span>antitracking_db
...
<span class="nv">$ MIX_ENV</span><span class="o">=</span>prod mix compile
<span class="nv">$ MIX_ENV</span><span class="o">=</span>prod mix release
</code></pre></div></div>

<p>Remember, we need to set the environment variables before compiling.
Otherwise, configuration values will be empty.</p>

<p>The compiled binary will then available on the <code class="language-plaintext highlighter-rouge">_build/prod/rel/bot/bin/</code> directory with the release name as the binary name (in this case <code class="language-plaintext highlighter-rouge">bot</code>).
The binary itself contains set of commands.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./_build/prod/rel/bot/bin/bot 
Usage: bot COMMAND <span class="o">[</span>ARGS]

The known commands are:

    start          Starts the system
    start_iex      Starts the system with IEx attached
    daemon         Starts the system as a daemon
    daemon_iex     Starts the system as a daemon with IEx attached
    <span class="nb">eval</span> <span class="s2">"EXPR"</span>    Executes the given expression on a new, non-booted system
    rpc <span class="s2">"EXPR"</span>     Executes the given expression remotely on the running system
    remote         Connects to the running system via a remote shell
    restart        Restarts the running system via a remote <span class="nb">command
    </span>stop           Stops the running system via a remote <span class="nb">command
    </span>pid            Prints the operating system PID of the running system via a remote <span class="nb">command
    </span>version        Prints the release name and version to be booted
</code></pre></div></div>

<p>We can even start the project as a daemon directly from the binary, cool!</p>

<h1 id="lesson-learned-and-future-works">Lesson Learned and Future Works</h1>

<p>Coming from OO / procedural programming paradigm, learning elixir is quite challenging.
I need to “rebuild” my thinking process just to solve a simple problem.</p>

<p>The book “<a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a>” by Sasa Juric is pretty good on introducing the language, environment, and guideline to writing elixir.
Solving some leetcode / hackerrank problem also helps a lot to give “sense” of the language.
The official documentation on <a href="https://hexdocs.pm/elixir/introduction.html">hexdocs</a> provides great step-by-step tutorial on creating an elixir project.</p>

<p>I realized that for a first project, this is far more perfect.
There are several topics / directions that I want to explore for my next elixir project.</p>
<ul>
  <li>Dockerize project</li>
  <li>Metrics (Telemetry)</li>
  <li>How does elixir perform compared to other modern webserver</li>
</ul>

<p>While working on this project is challenging, I’m having so much fun writing elixir.
Exploring elixir gives me a fresh feeling compared to my day programming job.
But, Elixir as praised as it is, still has its own flaws.</p>

<p>The idiom “there’s no silver bullet solution, just pick the righ tool for the right job” stand true even for it.
But I think, it’s okay to have your own favourite tool, in my case it might be elixir.</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Elixir is a functional programming language that promise both scalability and great fault-tolerance. It also provides great tools to support development. But how much does elixir live up to their promise?]]></summary></entry><entry><title type="html">Autotools Quickstart</title><link href="/posts/autotools-quickstart" rel="alternate" type="text/html" title="Autotools Quickstart" /><published>2024-03-24T00:00:00+07:00</published><updated>2024-03-24T00:00:00+07:00</updated><id>/posts/autotools-quickstart</id><content type="html" xml:base="/posts/autotools-quickstart"><![CDATA[<p>On my last post I talked about writing a test generator utilising autotools suite for its build system and packaging.
Since then, I’ve been writing some software using autotools.
But, everytime I need to reread the reference book or take a peek at my last project before I can start writing.
So, I figure that writing a quickstart of using autotools will be helpful for future me!</p>

<!--more-->

<h1 id="requirements">Requirements</h1>

<p>I’ll assume that we’re using a linux distribution on our machine (as I’m not sure whether the autotools suite support other os than linux).
Autotools suite (and c compiler) should be already included in your linux distro.
We’re using <code class="language-plaintext highlighter-rouge">Autoconf 2.71</code> and <code class="language-plaintext highlighter-rouge">Automake 1.16.1</code> in this post.
While older or newer version might also works, you should keep this in mind suppose there’s a differences.
You can check autotools version using these commands.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoconf <span class="nt">--version</span>
<span class="nv">$ </span>automake <span class="nt">--version</span>
</code></pre></div></div>

<p>Supposed for some reasons it’s not installed on your system, you can head to gnu.org website to download both <a href="https://www.gnu.org/software/autoconf/">autoconf</a> and <a href="https://www.gnu.org/software/automake/">automake</a>.</p>

<h1 id="initialising-the-project">Initialising The Project</h1>

<p>Let’s start by creating the project structure</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># quickstart is our project name</span>
<span class="nv">$ </span><span class="nb">mkdir </span>quickstart
<span class="nv">$ </span><span class="nb">cd </span>quickstart
<span class="nv">$ </span><span class="nb">mkdir </span>src
<span class="nv">$ </span><span class="nb">touch </span>src/main.c
</code></pre></div></div>

<p>The code will resides in <code class="language-plaintext highlighter-rouge">src</code> directory while autotools related will be placed in the root project directory.
We can of course costumize this and this is not a hard requirement.
But, let’s start with the default configuration for now.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>

<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="autotools-bootstrap">Autotools bootstrap</h1>

<p>In autotools projects, there’s a filed called <code class="language-plaintext highlighter-rouge">configure.ac</code>.
This file is the main configuration of the project.
The project dependencies, tools, project information, etc are configured through this file.</p>

<p>Fortunately, autotools comes with tools to help us with that.
Go to the project root directory and execute this.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoscan
</code></pre></div></div>

<p>Notice that you now have 2 new files in your projects, <code class="language-plaintext highlighter-rouge">autoscan.log</code> and <code class="language-plaintext highlighter-rouge">configure.scan</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── autoscan.log
├── configure.scan
└── src
    └── main.c
</code></pre></div></div>

<p>Let’s take a look at the <code class="language-plaintext highlighter-rouge">configure.scan</code> file.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.scan
<span class="c">#                                               -*- Autoconf -*-</span>
<span class="c"># Process this file with autoconf to produce a configure script.</span>

AC_PREREQ<span class="o">([</span>2.71]<span class="o">)</span>
AC_INIT<span class="o">([</span>FULL-PACKAGE-NAME], <span class="o">[</span>VERSION], <span class="o">[</span>BUG-REPORT-ADDRESS]<span class="o">)</span>
AC_CONFIG_SRCDIR<span class="o">([</span>src/main.c]<span class="o">)</span>
AC_CONFIG_HEADERS<span class="o">([</span>config.h]<span class="o">)</span>

<span class="c"># Checks for programs.</span>
AC_PROG_CC

<span class="c"># Checks for libraries.</span>

<span class="c"># Checks for header files.</span>

<span class="c"># Checks for typedefs, structures, and compiler characteristics.</span>

<span class="c"># Checks for library functions.</span>

AC_OUTPUT
</code></pre></div></div>

<p>The content of this file is auto generated based on the project structure it was run on.
To use it, let’s modify its content a bit and rename the file.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
AC_INIT([quickstart], [1.0.0], [report@email.com])
...
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mv </span>configure.scan configure.ac
</code></pre></div></div>

<h1 id="define-automake-files">Define Automake files</h1>

<p>Let’s continue to automake files.
Those files will let us define how the project should be built.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Makefile.am
SUBDIRS <span class="o">=</span> src
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// src/Makefile.am
bin_PROGRAMS <span class="o">=</span> quickstart
quickstart_SOURCES <span class="o">=</span> main.c
</code></pre></div></div>

<p>Here we define 2 automake files.
The one in the root project defines the project subdirectory to be discovered by autoconf later.
While the one in the <code class="language-plaintext highlighter-rouge">src</code> directory defines the program names and its sources.
Our project structures will now look like this.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── autoscan.log
├── configure.ac
├── Makefile.am
└── src
    ├── main.c
    └── Makefile.am
</code></pre></div></div>

<p>Let’s adjust our <code class="language-plaintext highlighter-rouge">configure.ac</code> file so the automake files will be processed by autotools later.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([foreign])
...
AC_CONFIG_FILES([Makefile
                 src/Makefile])
AC_OUTPUT
</code></pre></div></div>

<p>We’re initialising automake using <code class="language-plaintext highlighter-rouge">foreign</code> parameter.
This means that this project isn’t following conventional automake structure and we can skip adding required files (<code class="language-plaintext highlighter-rouge">AUTHORS</code>, <code class="language-plaintext highlighter-rouge">NEWS</code>, <code class="language-plaintext highlighter-rouge">ChangeLog</code>, and <code class="language-plaintext highlighter-rouge">README</code>).
In a real project, we should add those files for user informations.
For now, we’re ommiting those for abbreviation.</p>

<p>Notices that we’re listing config files based on the automake files that we created earlier.
Supposed later we want to add more subdirectory to the project, we need to also add it to the config file listing.</p>

<p>Last but not the least, we need to add some adjustment to our source codes.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="p">...</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">config.h</code> is a generated header file that contains information regarding compiler information, library availability, etc.
Whlie it’s useless right now, it’s always a good practice to add this to the source code anyway.</p>

<h1 id="executing-autotools">Executing Autotools</h1>

<p>Now that everything’s are ready, we can start executing the autotools.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoreconf <span class="nt">-i</span>
</code></pre></div></div>

<p>Command above will execute required commands to process the project, so we don’t need to manually execute them one by one.
The <code class="language-plaintext highlighter-rouge">-i</code> parameter will automatically create required missing files.</p>

<p>We can then compile the project.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./configure
<span class="nv">$ </span>make
</code></pre></div></div>

<p>The compiled program can then be executed.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./src/quickstart
<span class="c"># hello world</span>
</code></pre></div></div>

<p>You can install it to your path.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make <span class="nb">install</span> <span class="c"># might required root user</span>
</code></pre></div></div>

<p>Or compile it into a distributed package.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make dist
<span class="c"># quickstart-1.0.0.tar.gz</span>
</code></pre></div></div>

<h1 id="adding-dependencies">Adding dependencies</h1>

<p>Usually while working on a big project, often times we need to use libraries to support the main program.
Let’s see how do we add a library to our project.</p>

<p>Let’s add <a href="https://github.com/alvinmatias69/libvslogger">libvslogger</a> (leveled logger library) to our project.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
<span class="c"># Checks for libraries.</span>
AC_SEARCH_LIBS<span class="o">([</span>vslogger_init], <span class="o">[</span>vslogger]<span class="o">)</span>

<span class="c"># Checks for header files.</span>
AC_CHECK_HEADERS<span class="o">([</span>libvslogger.h]<span class="o">)</span>
...
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">AC_CHECK_HEADERS</code> will check whether the given header is available in the current machine.
The <code class="language-plaintext highlighter-rouge">AC_SEARCH_LIBS</code> will check and link the given library if available in the current machine.</p>

<p>Now we need to adjust our code to utilise the library.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;libvslogger.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">vslogger_config</span> <span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">VSLOGGER_INFO</span><span class="p">,</span>
        <span class="p">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">stdout</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_date</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_prefix</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="n">vslogger_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
    <span class="n">vslogger_info</span><span class="p">(</span><span class="s">"hello info"</span><span class="p">);</span>
    <span class="n">vslogger_clear</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because we modify the <code class="language-plaintext highlighter-rouge">configure.ac</code> file, we need to reconfigure the project first.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoreconf <span class="nt">-i</span>
</code></pre></div></div>

<p>Then, compile the project like we did before.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./configure
<span class="nv">$ </span>make
<span class="nv">$ </span>./src/quickstart
<span class="c"># [INFO][2024-03-24 13:32:55] hello info</span>
</code></pre></div></div>

<blockquote>
  <p>Note: If you encountered library not found error while executing the program, you might need to refresh your dynamic library link</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ldconfig # might need root access
</code></pre></div>  </div>
  <p>or add your library path to <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> directly, e.g.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ LD_LIBRARY_PATH=/usr/local/lib ./src/quickstart
</code></pre></div>  </div>
</blockquote>

<h2 id="optional-dependency">Optional Dependency</h2>

<p>We can’t control the user machine, how it’s behave or what libraries does it has.
In our case, there’s a possibility that our user doesn’t have the library that we require.
We can then just simply require them to install it or provides an alternative supposed the library is missing.
Let’s take a look at the latter approach.</p>

<p>Supposed our use doesn’t have the <code class="language-plaintext highlighter-rouge">libvslogger</code> library, instead of giving error we will instead use a simple <code class="language-plaintext highlighter-rouge">printf</code>.
To do this, first we need to adjust our <code class="language-plaintext highlighter-rouge">configure.ac</code> file.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
AC_SEARCH_LIBS<span class="o">([</span>vslogger_init], <span class="o">[</span>vslogger], <span class="o">[</span>AC_DEFINE<span class="o">([</span>HAVE_VSLOGGER], <span class="o">[</span>1], <span class="o">[</span>Define <span class="k">if </span>vslogger exist]<span class="o">)])</span>
</code></pre></div></div>

<p>The additional parameter will set <code class="language-plaintext highlighter-rouge">HAVE_VSLOGGER</code> variable supposed the library is available.
This variable will be defined in the <code class="language-plaintext highlighter-rouge">config.h</code> and can be used in our code.
Notice that this is the same file as the one that I mentioned earlier to be included in our source code.</p>

<p>Ideally, we should also check the header for the same and set the variable based on the availability of both the library and the header.
The implementation of that is left as an exercise for the reader.</p>

<p>Then, we can use this variable in our code using some conditional macros.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#ifdef HAVE_VSLOGGER
#include</span> <span class="cpf">&lt;libvslogger.h&gt;</span><span class="cp">
#else
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> </span><span class="cp">
#endif
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#ifdef HAVE_VSLOGGER
</span>    <span class="k">struct</span> <span class="n">vslogger_config</span> <span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">VSLOGGER_INFO</span><span class="p">,</span>
        <span class="p">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">stdout</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_date</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_prefix</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="n">vslogger_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
    <span class="n">vslogger_info</span><span class="p">(</span><span class="s">"hello info"</span><span class="p">);</span>
    <span class="n">vslogger_clear</span><span class="p">();</span>
<span class="cp">#else
</span>    <span class="n">printf</span><span class="p">(</span><span class="s">"hello standard</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="cp">#endif
</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="afterword">Afterword</h1>

<p>Thank you for reading! The full project is available in my github <a href="https://github.com/alvinmatias69/autotools-quickstart">repository</a>.
Again, I’ll emphasize that this post is not mean as a complete or exhaustive guide for autotools.
Rather, it’s a simple quickstart and usecase if you want to implement autotools in your project.</p>

<p>If you want to learn more about autotools, the gnu <a href="https://www.gnu.org/software/automake/faq/autotools-faq.html">website</a> has an extensive documentation and tutorial on that topic.
Also, check out <a href="https://www.goodreads.com/book/show/41866149-autotools-2nd-edition"><code class="language-plaintext highlighter-rouge">Autotools, 2nd Edition: A Practitioner's Guide to GNU Autoconf, Automake, and Libtool</code></a> by John Calcote.
I’m not affiliated or sponsored to promote the book, the book just very good at explaining autotools and I totally recommend you to read it if you want to delve deeper.</p>

<p>Again, Thank you for reading this post! Let me know if there’s any mistake or anything that I can improve.
See you in the next post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[On my last post I talked about writing a test generator utilising autotools suite for its build system and packaging. Since then, I’ve been writing some software using autotools. But, everytime I need to reread the reference book or take a peek at my last project before I can start writing. So, I figure that writing a quickstart of using autotools will be helpful for future me!]]></summary></entry><entry><title type="html">Writing cgentest: Table Test Generator for C</title><link href="/posts/writing-cgentest" rel="alternate" type="text/html" title="Writing cgentest: Table Test Generator for C" /><published>2023-09-07T00:00:00+07:00</published><updated>2023-09-07T00:00:00+07:00</updated><id>/posts/writing-cgentest</id><content type="html" xml:base="/posts/writing-cgentest"><![CDATA[<p>Usually, I use the test-driven development (TDD) approach when I’m writing a software project.
In Golang (the language that I used to write daily) there’s this neat library that helps me to do that, <a href="https://github.com/cweill/gotests">Gotests</a>.
Gotests is a simple tool that generates a table-driven test boilerplate, it helps me on writing tests on my past project.</p>

<p>Unfortunately, I can’t find such a tool in C.
While there are plenty of unit testing libraries, I’m unable to find the one that simply generates a Table-driven testing boilerplate.
So, I decided to write one myself.
<!--more--></p>

<p>What I thought to be a simple project that can be done in some weeks, turns into a long journey.
It’s not that the project is a tall mountain, rather it’s a dense forest.
There are so many problems that I wasn’t even aware of.
Safe to say, I had spent maybe 80% of my time in this project learning things.
And I don’t regret it, not even a bit!</p>

<h1 id="introduction">Introduction</h1>

<p>Writing tests is considered a chore for most programmers, it’s not that uncommon for them to skip out on writing tests.
But, regardless of that, most of them will agree that test is important.
It’s the quickest and most convenient way to do a sanity check on a software project.</p>

<p>There are multiple ways and methods to write tests.
One of them is Table-driven / Data-driven testing.
Table-driven testing is a method to write test specifications (input, output, condition, etc.) in “table” entries to later be tested iteratively.
To quote <a href="https://github.com/golang/go/wiki/TableDrivenTests">Golang Wiki</a> on Table-driven tests, “Table driven testing is not a tool, package or anything else, it’s just a way and perspective to write cleaner tests.”.</p>

<p>I like Table-driven testing.
It allows me to write simple but detailed tests, while also serving as code documentation.
The main drawback is it’s mainly tailored for unit testing, so it’s not easy if you want to use it for anything else (e.g. integration test).</p>

<p>I’m unable to find any similar tools to generate the boilerplate for C.
As I’ve mentioned in my previous post, I’m currently learning to write C projects.
And I think that the existence of this tool will help me greatly on that.
So I am writing this small tool to solve that problem, <a href="https://github.com/alvinmatias69/cgentest">cgentest</a>.</p>

<h1 id="glossaries">Glossaries</h1>

<p>Quick summaries of tools referenced in this project.
You can skip this section if you’re already familiar with these tools.</p>

<h2 id="ctags">Ctags</h2>

<p><code class="language-plaintext highlighter-rouge">ctags</code> is a tool to generates an index (or tag) file of language objects found in source files for programming languages. 
This index is then used by text editors or other tools to handle the indexed item.
This project utilize <a href="https://ctags.io/"><code class="language-plaintext highlighter-rouge">universal ctags</code></a> (abbreviated as u-ctags), a maintained implementation of <code class="language-plaintext highlighter-rouge">ctags</code>.</p>

<h2 id="mustache">Mustache</h2>

<p><a href="https://mustache.github.io/"><code class="language-plaintext highlighter-rouge">Mustache</code></a> is a <em>logic-less</em> template system. It works by expanding tags in a template using values provided.</p>

<h2 id="json">JSON</h2>
<p><code class="language-plaintext highlighter-rouge">JavaScript Object Notation</code> (<code class="language-plaintext highlighter-rouge">JSON</code>), is a file and data interchange text format consisting of key-value pairs and arrays. 
It’s mainly used in web applications, but its usage is really broad and applicable to any software project.</p>

<h2 id="autotools">Autotools</h2>

<p>The <a href="https://www.gnu.org/software/automake/faq/autotools-faq.html">GNU Autotools</a> (also known as GNU Build System), is a suite of programming tools designed to assist in making portable source code packages in Unix-like systems.</p>

<h1 id="writing-cgentest">Writing cgentest</h1>

<p>A quick and simple explanation of the cgentest process can be described as follows.</p>
<ol>
  <li>Read a C file and extract the function metadata (function name, parameters, return type)</li>
  <li>Map the function data into a boilerplate table-driven test of that file, Preferably into a customizable template.</li>
  <li>Output the generated boilerplate.</li>
</ol>

<p><img src="/assets/images/writing-cgentest/simple_cgentest_flow.png" alt="Simple flowchart of cgentest" width="100%" /></p>

<p>While it looks simple, each of the steps has its difficulties that have to be solved.</p>

<h2 id="extracting-c-functions-metadata">Extracting C Functions Metadata</h2>

<p>At first, I tried to use a finite state machine (FSM) to solve this.
Initially, I plan to tokenize the source file.
Those tokens then will be passed to the FSM to be parsed and relevant data is extracted.</p>

<p>I quickly realised the flaw of this approach though.</p>
<ul>
  <li>It’s prone to error. 
Need to make a very detailed FSM to generate accurate data.</li>
  <li>The scope is too big. 
It’s more like writing a parser at this point. 
Which is not the main objective of this project.</li>
</ul>

<p>Then, I found <code class="language-plaintext highlighter-rouge">universal ctags</code>, which are perfect for this project.</p>
<ul>
  <li>Its usage fits perfectly for the project requirement.</li>
  <li>Has a c library to read its result (<a href="https://github.com/universal-ctags/libreadtags">libreadtags</a>), no need to parse too much.</li>
</ul>

<p>But, it’s not that this approach is without a weakness.</p>
<ul>
  <li>The project now depends on a third-party library.</li>
  <li>ctags binary is required and will be executed by the project.</li>
  <li>The parsed result from <code class="language-plaintext highlighter-rouge">libreadtags</code> is not as clean, still needs to parse a bit.</li>
</ul>

<p>After weighing my options, I decided to go with <code class="language-plaintext highlighter-rouge">universal ctags</code>.
It’s more aligned with my goals of learning to write C, without delving too deep into technicalities.</p>

<p><img src="/assets/images/writing-cgentest/cgentest_ctags_sequence_diagram.png" alt="Sequence diagram relations between cgentest, ctags, and libreadtags" width="100%" /></p>

<h2 id="writing-the-generated-boilerplate">Writing the Generated Boilerplate</h2>

<p>Outputing the result can be done simply using string formatting and some conditionals.
However, this approach has several drawbacks.</p>
<ul>
  <li>It’s hard to make any changes later.</li>
  <li>The code will be cluttered and hard to read.</li>
  <li>More importantly, it’s hard to give the option of a custom template for the user.</li>
</ul>

<p>Considering my requirements, I decided to use the <code class="language-plaintext highlighter-rouge">Mustache</code> template system.
More specifically, I’m using <a href="https://gitlab.com/jobol/mustach">mustach</a> a C library for the <code class="language-plaintext highlighter-rouge">mustache</code> template.</p>
<ul>
  <li>Simple to use</li>
  <li>Still maintained</li>
  <li>Support several JSON libraries
    <ul>
      <li><a href="https://github.com/DaveGamble/cJSON">cJSON</a></li>
      <li><a href="https://github.com/akheron/jansson">jansson</a></li>
      <li><a href="https://github.com/json-c/json-c">json-c</a></li>
    </ul>
  </li>
</ul>

<p>To elaborate on my last point, what does <code class="language-plaintext highlighter-rouge">JSON</code> get to do with <code class="language-plaintext highlighter-rouge">mustache</code>?
Well, it’s plenty. You see, <code class="language-plaintext highlighter-rouge">mustache</code> originally is a web template and usually paired with <code class="language-plaintext highlighter-rouge">JSON</code> as its data provider.
<code class="language-plaintext highlighter-rouge">Mustach</code> itself relies on JSON libraries to aggregate the data into any <code class="language-plaintext highlighter-rouge">mustache</code> template.</p>

<p>To utilize <code class="language-plaintext highlighter-rouge">mustach</code> in a project, we can work in this step.</p>
<ol>
  <li>Map the data into a JSON representation using one of the supported libraries.</li>
  <li>Fed the data into mustach with its respective method (e.g. if using jansson, then we will be using <code class="language-plaintext highlighter-rouge">mustach_jansson_file</code>).</li>
</ol>

<p>We can simply support one library and be done with it.
But, I decided to support all three libraries.</p>

<h2 id="packaging-for-release">Packaging for Release</h2>

<p>I do have several experiences in releasing software. 
But, usually, I did that through the language package manager (<code class="language-plaintext highlighter-rouge">npm js</code>, <code class="language-plaintext highlighter-rouge">cargo rust</code>, <code class="language-plaintext highlighter-rouge">Golang mod</code>).</p>

<p>While C doesn’t have a universal package manager, several build systems can accommodate this.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cmake</code></li>
  <li><code class="language-plaintext highlighter-rouge">meson</code></li>
  <li><code class="language-plaintext highlighter-rouge">GNU autotools</code></li>
  <li>etc</li>
</ul>

<p>So, I then decided to use Autotools, because:</p>
<ul>
  <li>No dependency is needed (except dependency for the cgentest itself).</li>
  <li>I have used projects that utilize autotools many times in the past. Yet, never know how to use autotools in a project.</li>
</ul>

<p>The problem is, that autotools isn’t as easy to use as other modern build system.
There are not many resources to learn it on the internet too.
Most of it only explains the very simple usage or some pretty specific problem.
Although, in hindsight, most of it answered my project use case. 
But, at the time I still haven’t grasped the concept of autotools yet.</p>

<p>Fortunately, I found a great book that explains things in detail.
The book’s name is <code class="language-plaintext highlighter-rouge">Autotools</code> by John Calcote.
It’s a pretty good book, I spent several months reading it until I understood the basic concept of it.
I’m not claiming that I have mastered autotools, but it’s good enough to implement it in my project.</p>

<p>You know, people said that the best way to learn something is to learn by doing, so I did just that.
I decide to fully refactor the cgentest project to utilize <code class="language-plaintext highlighter-rouge">Autotools</code>.
Instead of using the git submodule and compiling the library together with the core code, I’m using shared linking libraries.
All three JSON libraries are supported for flexibility and use conditional compilation based on user choice.</p>

<p><img src="/assets/images/writing-cgentest/json_lib_diagram.png" alt="JSON libraries link flow" width="25%" /></p>

<p>The order by no means signifies anything.
It’s just the order of the implementation done in this project.</p>

<h2 id="putting-it-all-together">Putting it All Together</h2>

<p>Now that the cgentest is finished, let’s take a look at the complete product.
Given a C file with name <code class="language-plaintext highlighter-rouge">example.c</code></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">simple</span><span class="p">(</span><span class="n">bool</span> <span class="n">is_active</span><span class="p">)</span> <span class="p">{...}</span>
</code></pre></div></div>

<p>Run through cgentest, it will produce this result.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"example.c"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>

<span class="kt">void</span> <span class="nf">simple_test</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
        <span class="k">struct</span> <span class="p">{</span>
            <span class="n">bool</span> <span class="n">is_active</span><span class="p">;</span>
        <span class="p">}</span> <span class="n">parameters</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">expected</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">tests</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>

    <span class="p">};</span>

    <span class="kt">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Running simple_test: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">expected</span> <span class="o">==</span> <span class="n">simple</span><span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">parameters</span><span class="p">.</span><span class="n">is_active</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">=== Success ===</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">=== Failure ===</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>From there, we can add test case entres in the <code class="language-plaintext highlighter-rouge">tests</code> array. Pretty neat right?
As you can see, cgentest only generates a boilerplate.
I’ve stated it before, but let me reiterate. 
The table-driven test is a methodology, rather than a tool.
It helps to write flexible testing.</p>

<p>By default, cgentest uses a simple comparison.
But nothing stops a user from using a more sophisticated assertion library like <code class="language-plaintext highlighter-rouge">assert.h</code>.
It can even be used with any unit testing libraries.
Cgentest project utilizes <code class="language-plaintext highlighter-rouge">Autotest</code> for its unit testing library while using boilerplate generated by cgentest.
Here, <a href="https://github.com/alvinmatias69/cgentest/blob/master/tests/suites/util_test.c">check it out yourself</a>.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Now that the cgentest is finished, I’m very satisfied with the result.
In all honesty, the project is far from perfect. 
Now I look back at it again, I can think of several improvements that can be made.</p>
<ul>
  <li>Support for multiple file generation.</li>
  <li>Support for minimal dependencies, it’s possible only to depend on <code class="language-plaintext highlighter-rouge">ctags</code> and <code class="language-plaintext highlighter-rouge">libreadtags</code>.</li>
</ul>

<p>While working on cgentest, I’ve learned so many things.</p>
<ul>
  <li>How to use autotools suite.</li>
  <li>Utilize shared libraries.</li>
  <li>Debugging a C program using gdb.</li>
  <li>Checking memory leak using valgrind.</li>
</ul>

<p>For the next project will try to make something simple and short.
Either make a simple library to “complete” my journey of learning <code class="language-plaintext highlighter-rouge">Autotools</code>.
Or make an editor extension for cgentest, especially for emacs.</p>

<h1 id="recommended-resources">Recommended Resources</h1>

<p>Below are resources that are very useful through the writing of cgentest.</p>
<ul>
  <li>“Autotools, 2nd Edition: A Practitioner’s Guide to GNU Autoconf, Automake, and Libtool” book by John Calcote</li>
  <li>autotools gnu web documentation
    <ul>
      <li><a href="https://www.gnu.org/software/automake/">Automake</a></li>
      <li><a href="https://www.gnu.org/software/autoconf/">Autoconf</a></li>
      <li><a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Using-Autotest.html">Autotest</a></li>
    </ul>
  </li>
  <li>“How to Debug C Program using gdb in 6 Simple Steps” <a href="https://u.osu.edu/cstutorials/2018/09/28/how-to-debug-c-program-using-gdb-in-6-simple-steps/">blog</a> by Muhammed Emin Ozturk</li>
</ul>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Usually, I use the test-driven development (TDD) approach when I’m writing a software project. In Golang (the language that I used to write daily) there’s this neat library that helps me to do that, Gotests. Gotests is a simple tool that generates a table-driven test boilerplate, it helps me on writing tests on my past project. Unfortunately, I can’t find such a tool in C. While there are plenty of unit testing libraries, I’m unable to find the one that simply generates a Table-driven testing boilerplate. So, I decided to write one myself.]]></summary></entry><entry><title type="html">Reviving My Old Laptop</title><link href="/posts/laptop-revival" rel="alternate" type="text/html" title="Reviving My Old Laptop" /><published>2022-09-17T00:00:00+07:00</published><updated>2022-09-17T00:00:00+07:00</updated><id>/posts/laptop-revival</id><content type="html" xml:base="/posts/laptop-revival"><![CDATA[<p>Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?</p>

<!--more-->

<h1 id="background">Background</h1>

<p>The laptop in question is the first gadget that I bought with my own salary. It’s a MacBook Air from early 2015, I bought it back in college in 2017. I’m still a poor college student saving from my part-time jobs back then. For context, nowadays I mainly daily drive my desktop PC and use a company-issued laptop for work. So I’m in no dire need of a laptop, rather it’s more of the sentimental value of the laptop itself.</p>

<p>Also, I’ve encountered some blog posts about how Linus Torvalds is currently using an M2 MacBook with Fedora installed. So, I thought hey if the latest MacBook can run Linux then maybe my old laptop will have no problem. It should be a fun project to do at the weekend!</p>

<h2 id="problems">Problems</h2>

<p>Just as I stated, the laptop is old and kinda unusable in its current state.</p>

<h3 id="battery">Battery</h3>

<p>Most problems of old electronic lies in the battery. At the time, my laptop can only hold for about 10 minutes on battery. So if I want to use it, I need to connect to a wall plug all the time.</p>

<h3 id="storage">Storage</h3>

<p>My laptop only has 128Gb of storage. A “vanilla” macOS Big Sur installation takes about 40-50Gb of storage. Assume that additional basic software takes about 10Gb, it only leaves me with ~60Gb of storage. Not exactly that much by today’s standard.</p>

<h3 id="system-overall">System Overall</h3>

<p>At the time of this writing, macOS Big Sur is released two years <a href="https://en.wikipedia.org/wiki/MacOS_Big_Sur">ago</a> on 12 November 2020. While it still receives updates to this day, if someday Tim Apple decides to drop support for it my laptop is as good as a paperweight. Not to mention the performance is not the best. It’s kinda usable, but I’m not a fan of a laggy machine.</p>

<h1 id="its-revivin-time">It’s Revivin’ Time!</h1>

<p>After making sure that there are no important data saved (my brother was using my laptop for college for a while). I decided to fix the hardware issue first, the battery.</p>

<h2 id="a-new-battery">A New Battery</h2>

<p>Thankfully, the old gen MacBook is relatively easy to fix. A quick read at the iFixit <a href="https://www.ifixit.com/Device/MacBook_Air_13%22_Early_2015">website</a> and unsurprisingly the step is quite a simple DIY project. Unfortunately, looking for the replacement battery itself is not quite easy.</p>

<p>Because of the age of the laptop, looking for the original apple battery is out of the question (not to mention I don’t think they sell spare parts at all). My only choice is to look for an <a href="https://en.wikipedia.org/wiki/Original_equipment_manufacturer">OEM</a> battery from my local marketplace. Luckily for me, some online stores specialise in selling OEM laptop spare parts. After some days, the battery is arrived and ready.</p>

<p>The replacement itself is quite easy. It takes me about 15 minutes just by following instructions on the iFixit website. One thing to note though, apple (for whatever reason) doesn’t use your standard Phillips head screw. So you need a specialise screw to disassemble the laptop, fortunately, my replacement battery comes with the appropriate screwdriver, all good for me!</p>

<p>What I don’t expect is that battery calibration takes some time. It takes me about two days to complete 2 cycles of battery, so take this into the consideration.</p>

<h2 id="the-linux-strike-back">The Linux Strike Back</h2>

<p>I decided to go with <a href="https://spirallinux.github.io/">SpiralLinux</a> for the new OS. It’s a Linux distro based on Debian with some basic configurations and some non-free software and drivers. Truthfully, I’d like to go for Ubuntu if they don’t force snaps on their user. As for fedora, while I like the overall of it, it’s too cutting edge for my taste.</p>

<p>What surprised me is that the installation process itself is not that different from your everyday machine. After attaching the USB installation, I turn on my laptop while holding the <code class="language-plaintext highlighter-rouge">Option</code> key (this is how you choose the boot option on a mac) and then enter the live demo of SpiralLinux. After making sure that everything but the webcam (more on this later) works, I proceed with the installation.</p>

<p>Because I’m not planning to use the macOS anymore, I wipe the whole storage. Hence, the installation process is as simple as clicking next and filling out forms. When the installation is complete, I reboot my laptop and take out the installation USB. When the machine is up, I’m greeted by your standard lightDM login screen. The installation is a success! Surely, there won’t be any problem after this.</p>

<h2 id="return-of-the-problems">Return of the Problems</h2>

<p>Yeah, it’d be too naive to expect that there won’t be any problems. Most blogs that I read said that most likely I’ll encounter an issue with wireless connection. But, I’m able to connect to my home wifi easily. Both on the live USB and after the installation. I think the recent kernel has included the mac wifi driver in it.</p>

<h3 id="touchpad-not-working">Touchpad Not Working</h3>

<p>While on the live demo, I’m able to use the touchpad just fine. But, it’s not working (and not detected even) after the installation. Using an external mouse works just fine though. I suspect that somehow the driver for it is either not installed or configured incorrectly. Thankfully, updating (<code class="language-plaintext highlighter-rouge">apt update &amp;&amp; apt upgrade</code>) and restarting fixes the issue.</p>

<h3 id="webcam-not-working">Webcam Not Working</h3>

<p>I’ve mentioned it before, the webcam is not working at all. This is due to the webcam used by mac doesn’t use your daily standard driver (yeah, no surprise there). Thankfully, I stumbled upon the <a href="https://github.com/patjak/facetimehd/">facetimehd</a> repository by patjak. The repository contains an experimental driver for the MacBook webcam. The <a href="https://github.com/patjak/facetimehd/wiki/Installation">installation</a> process is quite straightforward, it works wonderfully. Besides known issues, I’ve not encountered any other problems.</p>

<h3 id="keyboard-layout">Keyboard Layout</h3>

<p>It’s not a problem per se, but rather a quality of life improvement. As we all know, apple (in their infinite wisdom and apple-centred design™) is using their own keyboard layout which is quite different from the standard keyboard layout. Thankfully (again), a user with the username free5lot has made a <a href="https://github.com/free5lot/hid-apple-patched">repository</a> for solving this “issue”. Goodbye apple-centred design™ layout, welcome sensible standard keyboard layout.</p>

<h2 id="the-config-menace">The Config Menace</h2>

<p>All problems are fixed, it’s time to configure the machine. Now, I’m the kind of guy that has different VM for different occasions. Be it work or personal projects. Hence, I have a pretty complete (for me personally) ansible playbook to be based on. So, configuring is as simple as <code class="language-plaintext highlighter-rouge">$ ansible-pull -U &lt;my_ansible_playbook_repo&gt;</code> for me. Then again, you might be too naive if you think that everything will work without any problems.</p>

<h3 id="the-problem-with-stable">The Problem with Stable</h3>

<p>Debian is stable, which means the available software might be months or even years behind the latest version. Most of the time this is not a problem, but rather an advantage. Because it’ll provide much more stability and fewer unknown issues. But, I forgot that my current project is using <a href="https://docs.gtk.org/gtk4/index.html">GTK4</a> which can be considered a new software and not available on Debian stable.</p>

<p>At this point, I have two options. One, compiling from source. This option is not exactly easy, as I need to compile the dependencies too. Also, gtk4 requires a recent version of Glibc. Which is not quite an easy feat to upgrade from the source. So I go with my second option, using the testing repository.</p>

<p>Debian has three different <a href="https://www.debian.org/doc/manuals/debian-faq/choosing.en.html">repositories</a>. The tl;dr is that new packages are first introduced to <code class="language-plaintext highlighter-rouge">unstable</code>. After some compiling and testing, it will move to <code class="language-plaintext highlighter-rouge">testing</code>. Finally, if all goes well, it will be moved to <code class="language-plaintext highlighter-rouge">stable</code>. Gtk4 is available on both testing and unstable repositories.</p>

<p>While it’s possible to wait until the package is introduced to stable, it’ll take a while. So, I should change the repository. Thankfully, SpiralLinux provides an out-of-the-box way to change <a href="https://github.com/SpiralLinux/SpiralLinux-project/wiki#switching-from-debian-stable-to-the-testing-or-unstable-branch">repository</a>. Though, it’ll take some times to migrate the repository. After it’s done I can install my required packages and finally, my machine is ready to use!</p>

<h1 id="afterword">Afterword</h1>

<p><img src="/assets/images/laptop-revival/macbook_linux.png" alt="My MacBook Linux Desktop" width="100%" /></p>

<p>Now, the storage usage is only about 14Gb, even after installing all of my additional software. The machine is also more snappy and doesn’t turn off without plugging into power. Even though the journey is not exactly smooth, I’m quite happy with the result. Not only the laptop is usable again, but I also learn so much while configuring it.</p>

<p>Well, I’m not exactly solved all of the problems. As currently, I’m not sure how to dispose of the old battery. I’ve found <code class="language-plaintext highlighter-rouge">octopus</code>, an Indonesian-based startup that handles e-waste. But, I haven’t tried it yet. Maybe I’ll make a review after trying it. In the meantime, please let me know if you have any information on e-waste disposal in Indonesia. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?]]></summary></entry><entry><title type="html">GTK4 Cursor Manipulation</title><link href="/posts/gtk4-cursor" rel="alternate" type="text/html" title="GTK4 Cursor Manipulation" /><published>2022-06-02T00:00:00+07:00</published><updated>2022-06-02T00:00:00+07:00</updated><id>/posts/gtk4-cursor</id><content type="html" xml:base="/posts/gtk4-cursor"><![CDATA[<p>A cursor can be used as a visual hint to users on how can they interact with an app. 
<!--more-->
For example, for a <code class="language-plaintext highlighter-rouge">pointer</code> cursor, it is implied that an element is clickable. 
<code class="language-plaintext highlighter-rouge">Progress</code> cursor indicates that the application is currently working, and the user should wait.</p>

<p>In this post, we’ll look at various method we can use to modify cursor in GTK4.</p>

<h2 id="change-cursor-on-hover">Change Cursor on Hover</h2>

<p>This usecase is used to give users a hint on how they can interact with an application element. In example <code class="language-plaintext highlighter-rouge">pointer</code> cursor over a button, <code class="language-plaintext highlighter-rouge">text</code> cursor over a text input, and so on.</p>

<p>Thankfully, unlike in GTK3, we can invoke a function call to set this instead of setting up the event manually. We have two functions for this:</p>
<ul>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor.html">gtk_widget_set_cursor</a></li>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor_from_name.html">gtk_widget_set_cursor_from_name</a></li>
</ul>

<h3 id="gtk_widget_set_cursor">gtk_widget_set_cursor</h3>

<p>This function took 2 parameters. Widget pointer and cursor object. 
The Widget parameter is straightforward, it is the widget that we are going to give the hover cursor.
The cursor parameter is a gdk object and it is nullable. In case the parameter is null, it will use the default cursor.</p>

<p>Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me"</span><span class="p">);</span>
<span class="n">GdkCursor</span> <span class="o">*</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">gdk_cursor_new_from_name</span><span class="p">(</span><span class="s">"pointer"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="n">cursor</span><span class="p">);</span>
</code></pre></div></div>

<p>Above, we created a new button and cursor. 
The cursor is a gdk object with a pointer as the cursor. 
You can refer to the <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_name.html">gdk documentation</a> for the list of available cursor names. 
Alternatively, you can use a custom image as a cursor with <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_texture.html">gdk_cursor_new_from_texture</a>.</p>

<blockquote>
  <p>Note: if you are developing in <a href="https://wiki.gnome.org/Apps/Builder">Gnome Builder</a> the cursor might not be changed if you run your project using the gui apps (<code class="language-plaintext highlighter-rouge">ctrl+f5</code>).
You need to export the bundle and then run it manually (or install the exported flatpak project first) to make it work.</p>
</blockquote>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor.mp4" type="video/mp4" />
</video>

<p>As you can see the cursor is automatically changed to pointer once it’s hovering on the button. In the next section, we’ll look at how to simplify this process even more.</p>

<h3 id="gtk_widget_set_cursor_from_name">gtk_widget_set_cursor_from_name</h3>

<p>GTK has provided us with a shortcut for the above snippet. Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me simple"</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">gtk_widget_set_cursor_from_name</code> we can simply provide the cursor type name, without any need to create the cursor object ourselves.
Take note that the cursor name is nullable. In this case, the widget will use the cursor inherited from the parent widget.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor_with_name.mp4" type="video/mp4" />
</video>

<h2 id="change-cursor-for-window">Change Cursor for Window</h2>

<p>In GTK3 we have <a href="https://docs.gtk.org/gdk3/method.Window.set_cursor.html">gdk_window_set_cursor</a> which will change the cursor for a given window.
It’s been <a href="https://docs.gtk.org/gtk4/migrating-3to4.html#adapt-to-cursor-api-changes">deprecated</a> in GTK4. Instead, we can use the function above by passing the window as our widget.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkWidget</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="n">gtk_application_window_new</span> <span class="p">(</span><span class="n">app</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>As you can see, there’s no different than the previous snippet. The only difference is that we pass the window as a widget in exchange for the previous button.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/window.mp4" type="video/mp4" />
</video>

<hr />

<p>To be completely honest, I choose this topic because I have spent hours debugging my project. 
Before I realize that the cursor won’t be changed if you run it inside the gnome-builder lol.
Hopefully, this post can help you to avoid repeating my mistake. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[A cursor can be used as a visual hint to users on how can they interact with an app.]]></summary></entry><entry><title type="html">Hello World!</title><link href="/posts/hello-world" rel="alternate" type="text/html" title="Hello World!" /><published>2022-05-29T00:00:00+07:00</published><updated>2022-05-29T00:00:00+07:00</updated><id>/posts/hello-world</id><content type="html" xml:base="/posts/hello-world"><![CDATA[<p>Welcome to my blog’s first post!
<!--more--></p>

<p>I was working on my project the other day. I’m working on a desktop GUI project, which is not as popular as a web project nowadays. As a result, there are not that many online sources that I can refer to while working on it (not to mention the official documentation is not that good). So I was thinking, hey I should write this up so I can help my future self. While I’m at it I also think that writing it in a blog maybe is not a bad idea!</p>

<p>As you can see, my blog is a bit bare. I’m inspired by <a href="https://motherfuckingwebsite.com/">this website</a> for the design. Also, because it’s mainly just for my note I think it’s good to keep things simple and lightweight. Please let me know if you have any suggestions!</p>

<p>For now, I plan to write some posts related to desktop GUI software. More specifically on GTK and C. Please note that I’m not a professional C engineer by any means (I write java for a living, like your everyday software engineer). So, I’m sorry if most of my post only consists of surface-level knowledge or even contains any errors. Please let me know if that happened. You can send me an <a href="mailto:contact@matiasalvin.dev">email</a> or contact me on my socials.</p>

<p>So, as I’ve already mentioned. This blog will be mainly used as my notes on my software engineer journeys. Also, I’m not a native speaker. Hopefully, by writing a lot of English I can be better at my English. Thank you, and I hope you enjoy your stay here!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Welcome to my blog’s first post!]]></summary></entry></feed>