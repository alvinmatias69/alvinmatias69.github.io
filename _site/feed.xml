<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-03-24T14:31:43+07:00</updated><id>/feed.xml</id><entry><title type="html">Autotools Quickstart</title><link href="/posts/autotools-quickstart" rel="alternate" type="text/html" title="Autotools Quickstart" /><published>2024-03-24T00:00:00+07:00</published><updated>2024-03-24T00:00:00+07:00</updated><id>/posts/autotools-quickstart</id><content type="html" xml:base="/posts/autotools-quickstart"><![CDATA[<p>On my last post I talked about writing a test generator utilising autotools suite for its build system and packaging.
Since then, I’ve been writing some software using autotools.
But, everytime I need to reread the reference book or take a peek at my last project before I can start writing.
So, I figure that writing a quickstart of using autotools will be helpful for future me!</p>

<!--more-->

<h1 id="requirements">Requirements</h1>

<p>I’ll assume that we’re using a linux distribution on our machine (as I’m not sure whether the autotools suite support other os than linux).
Autotools suite (and c compiler) should be already included in your linux distro.
We’re using <code class="language-plaintext highlighter-rouge">Autoconf 2.71</code> and <code class="language-plaintext highlighter-rouge">Automake 1.16.1</code> in this post.
While older or newer version might also works, you should keep this in mind suppose there’s a differences.
You can check autotools version using these commands.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoconf <span class="nt">--version</span>
<span class="nv">$ </span>automake <span class="nt">--version</span>
</code></pre></div></div>

<p>Supposed for some reasons it’s not installed on your system, you can head to gnu.org website to download both <a href="https://www.gnu.org/software/autoconf/">autoconf</a> and <a href="https://www.gnu.org/software/automake/">automake</a>.</p>

<h1 id="initialising-the-project">Initialising The Project</h1>

<p>Let’s start by creating the project structure</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># quickstart is our project name</span>
<span class="nv">$ </span><span class="nb">mkdir </span>quickstart
<span class="nv">$ </span><span class="nb">cd </span>quickstart
<span class="nv">$ </span><span class="nb">mkdir </span>src
<span class="nv">$ </span><span class="nb">touch </span>src/main.c
</code></pre></div></div>

<p>The code will resides in <code class="language-plaintext highlighter-rouge">src</code> directory while autotools related will be placed in the root project directory.
We can of course costumize this and this is not a hard requirement.
But, let’s start with the default configuration for now.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>

<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="autotools-bootstrap">Autotools bootstrap</h1>

<p>In autotools projects, there’s a filed called <code class="language-plaintext highlighter-rouge">configure.ac</code>.
This file is the main configuration of the project.
The project dependencies, tools, project information, etc are configured through this file.</p>

<p>Fortunately, autotools comes with tools to help us with that.
Go to the project root directory and execute this.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoscan
</code></pre></div></div>

<p>Notice that you now have 2 new files in your projects, <code class="language-plaintext highlighter-rouge">autoscan.log</code> and <code class="language-plaintext highlighter-rouge">configure.scan</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── autoscan.log
├── configure.scan
└── src
    └── main.c
</code></pre></div></div>

<p>Let’s take a look at the <code class="language-plaintext highlighter-rouge">configure.scan</code> file.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.scan
<span class="c">#                                               -*- Autoconf -*-</span>
<span class="c"># Process this file with autoconf to produce a configure script.</span>

AC_PREREQ<span class="o">([</span>2.71]<span class="o">)</span>
AC_INIT<span class="o">([</span>FULL-PACKAGE-NAME], <span class="o">[</span>VERSION], <span class="o">[</span>BUG-REPORT-ADDRESS]<span class="o">)</span>
AC_CONFIG_SRCDIR<span class="o">([</span>src/main.c]<span class="o">)</span>
AC_CONFIG_HEADERS<span class="o">([</span>config.h]<span class="o">)</span>

<span class="c"># Checks for programs.</span>
AC_PROG_CC

<span class="c"># Checks for libraries.</span>

<span class="c"># Checks for header files.</span>

<span class="c"># Checks for typedefs, structures, and compiler characteristics.</span>

<span class="c"># Checks for library functions.</span>

AC_OUTPUT
</code></pre></div></div>

<p>The content of this file is auto generated based on the project structure it was run on.
To use it, let’s modify its content a bit and rename the file.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
AC_INIT([quickstart], [1.0.0], [report@email.com])
...
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mv </span>configure.scan configure.ac
</code></pre></div></div>

<h1 id="define-automake-files">Define Automake files</h1>

<p>Let’s continue to automake files.
Those files will let us define how the project should be built.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Makefile.am
SUBDIRS <span class="o">=</span> src
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// src/Makefile.am
bin_PROGRAMS <span class="o">=</span> quickstart
quickstart_SOURCES <span class="o">=</span> main.c
</code></pre></div></div>

<p>Here we define 2 automake files.
The one in the root project defines the project subdirectory to be discovered by autoconf later.
While the one in the <code class="language-plaintext highlighter-rouge">src</code> directory defines the program names and its sources.
Our project structures will now look like this.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── autoscan.log
├── configure.ac
├── Makefile.am
└── src
    ├── main.c
    └── Makefile.am
</code></pre></div></div>

<p>Let’s adjust our <code class="language-plaintext highlighter-rouge">configure.ac</code> file so the automake files will be processed by autotools later.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([foreign])
...
AC_CONFIG_FILES([Makefile
                 src/Makefile])
AC_OUTPUT
</code></pre></div></div>

<p>We’re initialising automake using <code class="language-plaintext highlighter-rouge">foreign</code> parameter.
This means that this project isn’t following conventional automake structure and we can skip adding required files (<code class="language-plaintext highlighter-rouge">AUTHORS</code>, <code class="language-plaintext highlighter-rouge">NEWS</code>, <code class="language-plaintext highlighter-rouge">ChangeLog</code>, and <code class="language-plaintext highlighter-rouge">README</code>).
In a real project, we should add those files for user informations.
For now, we’re ommiting those for abbreviation.</p>

<p>Notices that we’re listing config files based on the automake files that we created earlier.
Supposed later we want to add more subdirectory to the project, we need to also add it to the config file listing.</p>

<p>Last but not the least, we need to add some adjustment to our source codes.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="p">...</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">config.h</code> is a generated header file that contains information regarding compiler information, library availability, etc.
Whlie it’s useless right now, it’s always a good practice to add this to the source code anyway.</p>

<h1 id="executing-autotools">Executing Autotools</h1>

<p>Now that everything’s are ready, we can start executing the autotools.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoreconf <span class="nt">-i</span>
</code></pre></div></div>

<p>Command above will execute required commands to process the project, so we don’t need to manually execute them one by one.
The <code class="language-plaintext highlighter-rouge">-i</code> parameter will automatically create required missing files.</p>

<p>We can then compile the project.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./configure
<span class="nv">$ </span>make
</code></pre></div></div>

<p>The compiled program can then be executed.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./src/quickstart
<span class="c"># hello world</span>
</code></pre></div></div>

<p>You can install it to your path.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make <span class="nb">install</span> <span class="c"># might required root user</span>
</code></pre></div></div>

<p>Or compile it into a distributed package.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make dist
<span class="c"># quickstart-1.0.0.tar.gz</span>
</code></pre></div></div>

<h1 id="adding-dependencies">Adding dependencies</h1>

<p>Usually while working on a big project, often times we need to use libraries to support the main program.
Let’s see how do we add a library to our project.</p>

<p>Let’s add <a href="https://github.com/alvinmatias69/libvslogger">libvslogger</a> (leveled logger library) to our project.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
<span class="c"># Checks for libraries.</span>
AC_SEARCH_LIBS<span class="o">([</span>vslogger_init], <span class="o">[</span>vslogger]<span class="o">)</span>

<span class="c"># Checks for header files.</span>
AC_CHECK_HEADERS<span class="o">([</span>libvslogger.h]<span class="o">)</span>
...
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">AC_CHECK_HEADERS</code> will check whether the given header is available in the current machine.
The <code class="language-plaintext highlighter-rouge">AC_SEARCH_LIBS</code> will check and link the given library if available in the current machine.</p>

<p>Now we need to adjust our code to utilise the library.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;libvslogger.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">vslogger_config</span> <span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">VSLOGGER_INFO</span><span class="p">,</span>
        <span class="p">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">stdout</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_date</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_prefix</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="n">vslogger_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
    <span class="n">vslogger_info</span><span class="p">(</span><span class="s">"hello info"</span><span class="p">);</span>
    <span class="n">vslogger_clear</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because we modify the <code class="language-plaintext highlighter-rouge">configure.ac</code> file, we need to reconfigure the project first.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>autoreconf <span class="nt">-i</span>
</code></pre></div></div>

<p>Then, compile the project like we did before.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./configure
<span class="nv">$ </span>make
<span class="nv">$ </span>./src/quickstart
<span class="c"># [INFO][2024-03-24 13:32:55] hello info</span>
</code></pre></div></div>

<blockquote>
  <p>Note: If you encountered library not found error while executing the program, you might need to refresh your dynamic library link</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ldconfig # might need root access
</code></pre></div>  </div>
  <p>or add your library path to <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> directly, e.g.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ LD_LIBRARY_PATH=/usr/local/lib ./src/quickstart
</code></pre></div>  </div>
</blockquote>

<h2 id="optional-dependency">Optional Dependency</h2>

<p>We can’t control the user machine, how it’s behave or what libraries does it has.
In our case, there’s a possibility that our user doesn’t have the library that we require.
We can then just simply require them to install it or provides an alternative supposed the library is missing.
Let’s take a look at the latter approach.</p>

<p>Supposed our use doesn’t have the <code class="language-plaintext highlighter-rouge">libvslogger</code> library, instead of giving error we will instead use a simple <code class="language-plaintext highlighter-rouge">printf</code>.
To do this, first we need to adjust our <code class="language-plaintext highlighter-rouge">configure.ac</code> file.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// configure.ac
...
AC_SEARCH_LIBS<span class="o">([</span>vslogger_init], <span class="o">[</span>vslogger], <span class="o">[</span>AC_DEFINE<span class="o">([</span>HAVE_VSLOGGER], <span class="o">[</span>1], <span class="o">[</span>Define <span class="k">if </span>vslogger exist]<span class="o">)])</span>
</code></pre></div></div>

<p>The additional parameter will set <code class="language-plaintext highlighter-rouge">HAVE_VSLOGGER</code> variable supposed the library is available.
This variable will be defined in the <code class="language-plaintext highlighter-rouge">config.h</code> and can be used in our code.
Notice that this is the same file as the one that I mentioned earlier to be included in our source code.</p>

<p>Ideally, we should also check the header for the same and set the variable based on the availability of both the library and the header.
The implementation of that is left as an exercise for the reader.</p>

<p>Then, we can use this variable in our code using some conditional macros.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// src/main.c</span>
<span class="cp">#include</span> <span class="cpf">"config.h"</span><span class="cp">
</span>
<span class="cp">#ifdef HAVE_VSLOGGER
#include</span> <span class="cpf">&lt;libvslogger.h&gt;</span><span class="cp">
#else
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1"> </span><span class="cp">
#endif
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
<span class="cp">#ifdef HAVE_VSLOGGER
</span>    <span class="k">struct</span> <span class="n">vslogger_config</span> <span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">VSLOGGER_INFO</span><span class="p">,</span>
        <span class="p">.</span><span class="n">destination</span> <span class="o">=</span> <span class="n">stdout</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_date</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
        <span class="p">.</span><span class="n">enable_prefix</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="n">vslogger_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span>
    <span class="n">vslogger_info</span><span class="p">(</span><span class="s">"hello info"</span><span class="p">);</span>
    <span class="n">vslogger_clear</span><span class="p">();</span>
<span class="cp">#else
</span>    <span class="n">printf</span><span class="p">(</span><span class="s">"hello standard</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="cp">#endif
</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="afterword">Afterword</h1>

<p>Thank you for reading! The full project is available in my github <a href="https://github.com/alvinmatias69/autotools-quickstart">repository</a>.
Again, I’ll emphasize that this post is not mean as a complete or exhaustive guide for autotools.
Rather, it’s a simple quickstart and usecase if you want to implement autotools in your project.</p>

<p>If you want to learn more about autotools, the gnu <a href="https://www.gnu.org/software/automake/faq/autotools-faq.html">website</a> has an extensive documentation and tutorial on that topic.
Also, check out <a href="https://www.goodreads.com/book/show/41866149-autotools-2nd-edition"><code class="language-plaintext highlighter-rouge">Autotools, 2nd Edition: A Practitioner's Guide to GNU Autoconf, Automake, and Libtool</code></a> by John Calcote.
I’m not affiliated or sponsored to promote the book, the book just very good at explaining autotools and I totally recommend you to read it if you want to delve deeper.</p>

<p>Again, Thank you for reading this post! Let me know if there’s any mistake or anything that I can improve.
See you in the next post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[On my last post I talked about writing a test generator utilising autotools suite for its build system and packaging. Since then, I’ve been writing some software using autotools. But, everytime I need to reread the reference book or take a peek at my last project before I can start writing. So, I figure that writing a quickstart of using autotools will be helpful for future me!]]></summary></entry><entry><title type="html">Writing cgentest: Table Test Generator for C</title><link href="/posts/writing-cgentest" rel="alternate" type="text/html" title="Writing cgentest: Table Test Generator for C" /><published>2023-09-07T00:00:00+07:00</published><updated>2023-09-07T00:00:00+07:00</updated><id>/posts/writing-cgentest</id><content type="html" xml:base="/posts/writing-cgentest"><![CDATA[<p>Usually, I use the test-driven development (TDD) approach when I’m writing a software project.
In Golang (the language that I used to write daily) there’s this neat library that helps me to do that, <a href="https://github.com/cweill/gotests">Gotests</a>.
Gotests is a simple tool that generates a table-driven test boilerplate, it helps me on writing tests on my past project.</p>

<p>Unfortunately, I can’t find such a tool in C.
While there are plenty of unit testing libraries, I’m unable to find the one that simply generates a Table-driven testing boilerplate.
So, I decided to write one myself.
<!--more--></p>

<p>What I thought to be a simple project that can be done in some weeks, turns into a long journey.
It’s not that the project is a tall mountain, rather it’s a dense forest.
There are so many problems that I wasn’t even aware of.
Safe to say, I had spent maybe 80% of my time in this project learning things.
And I don’t regret it, not even a bit!</p>

<h1 id="introduction">Introduction</h1>

<p>Writing tests is considered a chore for most programmers, it’s not that uncommon for them to skip out on writing tests.
But, regardless of that, most of them will agree that test is important.
It’s the quickest and most convenient way to do a sanity check on a software project.</p>

<p>There are multiple ways and methods to write tests.
One of them is Table-driven / Data-driven testing.
Table-driven testing is a method to write test specifications (input, output, condition, etc.) in “table” entries to later be tested iteratively.
To quote <a href="https://github.com/golang/go/wiki/TableDrivenTests">Golang Wiki</a> on Table-driven tests, “Table driven testing is not a tool, package or anything else, it’s just a way and perspective to write cleaner tests.”.</p>

<p>I like Table-driven testing.
It allows me to write simple but detailed tests, while also serving as code documentation.
The main drawback is it’s mainly tailored for unit testing, so it’s not easy if you want to use it for anything else (e.g. integration test).</p>

<p>I’m unable to find any similar tools to generate the boilerplate for C.
As I’ve mentioned in my previous post, I’m currently learning to write C projects.
And I think that the existence of this tool will help me greatly on that.
So I am writing this small tool to solve that problem, <a href="https://github.com/alvinmatias69/cgentest">cgentest</a>.</p>

<h1 id="glossaries">Glossaries</h1>

<p>Quick summaries of tools referenced in this project.
You can skip this section if you’re already familiar with these tools.</p>

<h2 id="ctags">Ctags</h2>

<p><code class="language-plaintext highlighter-rouge">ctags</code> is a tool to generates an index (or tag) file of language objects found in source files for programming languages. 
This index is then used by text editors or other tools to handle the indexed item.
This project utilize <a href="https://ctags.io/"><code class="language-plaintext highlighter-rouge">universal ctags</code></a> (abbreviated as u-ctags), a maintained implementation of <code class="language-plaintext highlighter-rouge">ctags</code>.</p>

<h2 id="mustache">Mustache</h2>

<p><a href="https://mustache.github.io/"><code class="language-plaintext highlighter-rouge">Mustache</code></a> is a <em>logic-less</em> template system. It works by expanding tags in a template using values provided.</p>

<h2 id="json">JSON</h2>
<p><code class="language-plaintext highlighter-rouge">JavaScript Object Notation</code> (<code class="language-plaintext highlighter-rouge">JSON</code>), is a file and data interchange text format consisting of key-value pairs and arrays. 
It’s mainly used in web applications, but its usage is really broad and applicable to any software project.</p>

<h2 id="autotools">Autotools</h2>

<p>The <a href="https://www.gnu.org/software/automake/faq/autotools-faq.html">GNU Autotools</a> (also known as GNU Build System), is a suite of programming tools designed to assist in making portable source code packages in Unix-like systems.</p>

<h1 id="writing-cgentest">Writing cgentest</h1>

<p>A quick and simple explanation of the cgentest process can be described as follows.</p>
<ol>
  <li>Read a C file and extract the function metadata (function name, parameters, return type)</li>
  <li>Map the function data into a boilerplate table-driven test of that file, Preferably into a customizable template.</li>
  <li>Output the generated boilerplate.</li>
</ol>

<p><img src="/assets/images/writing-cgentest/simple_cgentest_flow.png" alt="Simple flowchart of cgentest" width="100%" /></p>

<p>While it looks simple, each of the steps has its difficulties that have to be solved.</p>

<h2 id="extracting-c-functions-metadata">Extracting C Functions Metadata</h2>

<p>At first, I tried to use a finite state machine (FSM) to solve this.
Initially, I plan to tokenize the source file.
Those tokens then will be passed to the FSM to be parsed and relevant data is extracted.</p>

<p>I quickly realised the flaw of this approach though.</p>
<ul>
  <li>It’s prone to error. 
Need to make a very detailed FSM to generate accurate data.</li>
  <li>The scope is too big. 
It’s more like writing a parser at this point. 
Which is not the main objective of this project.</li>
</ul>

<p>Then, I found <code class="language-plaintext highlighter-rouge">universal ctags</code>, which are perfect for this project.</p>
<ul>
  <li>Its usage fits perfectly for the project requirement.</li>
  <li>Has a c library to read its result (<a href="https://github.com/universal-ctags/libreadtags">libreadtags</a>), no need to parse too much.</li>
</ul>

<p>But, it’s not that this approach is without a weakness.</p>
<ul>
  <li>The project now depends on a third-party library.</li>
  <li>ctags binary is required and will be executed by the project.</li>
  <li>The parsed result from <code class="language-plaintext highlighter-rouge">libreadtags</code> is not as clean, still needs to parse a bit.</li>
</ul>

<p>After weighing my options, I decided to go with <code class="language-plaintext highlighter-rouge">universal ctags</code>.
It’s more aligned with my goals of learning to write C, without delving too deep into technicalities.</p>

<p><img src="/assets/images/writing-cgentest/cgentest_ctags_sequence_diagram.png" alt="Sequence diagram relations between cgentest, ctags, and libreadtags" width="100%" /></p>

<h2 id="writing-the-generated-boilerplate">Writing the Generated Boilerplate</h2>

<p>Outputing the result can be done simply using string formatting and some conditionals.
However, this approach has several drawbacks.</p>
<ul>
  <li>It’s hard to make any changes later.</li>
  <li>The code will be cluttered and hard to read.</li>
  <li>More importantly, it’s hard to give the option of a custom template for the user.</li>
</ul>

<p>Considering my requirements, I decided to use the <code class="language-plaintext highlighter-rouge">Mustache</code> template system.
More specifically, I’m using <a href="https://gitlab.com/jobol/mustach">mustach</a> a C library for the <code class="language-plaintext highlighter-rouge">mustache</code> template.</p>
<ul>
  <li>Simple to use</li>
  <li>Still maintained</li>
  <li>Support several JSON libraries
    <ul>
      <li><a href="https://github.com/DaveGamble/cJSON">cJSON</a></li>
      <li><a href="https://github.com/akheron/jansson">jansson</a></li>
      <li><a href="https://github.com/json-c/json-c">json-c</a></li>
    </ul>
  </li>
</ul>

<p>To elaborate on my last point, what does <code class="language-plaintext highlighter-rouge">JSON</code> get to do with <code class="language-plaintext highlighter-rouge">mustache</code>?
Well, it’s plenty. You see, <code class="language-plaintext highlighter-rouge">mustache</code> originally is a web template and usually paired with <code class="language-plaintext highlighter-rouge">JSON</code> as its data provider.
<code class="language-plaintext highlighter-rouge">Mustach</code> itself relies on JSON libraries to aggregate the data into any <code class="language-plaintext highlighter-rouge">mustache</code> template.</p>

<p>To utilize <code class="language-plaintext highlighter-rouge">mustach</code> in a project, we can work in this step.</p>
<ol>
  <li>Map the data into a JSON representation using one of the supported libraries.</li>
  <li>Fed the data into mustach with its respective method (e.g. if using jansson, then we will be using <code class="language-plaintext highlighter-rouge">mustach_jansson_file</code>).</li>
</ol>

<p>We can simply support one library and be done with it.
But, I decided to support all three libraries.</p>

<h2 id="packaging-for-release">Packaging for Release</h2>

<p>I do have several experiences in releasing software. 
But, usually, I did that through the language package manager (<code class="language-plaintext highlighter-rouge">npm js</code>, <code class="language-plaintext highlighter-rouge">cargo rust</code>, <code class="language-plaintext highlighter-rouge">Golang mod</code>).</p>

<p>While C doesn’t have a universal package manager, several build systems can accommodate this.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">cmake</code></li>
  <li><code class="language-plaintext highlighter-rouge">meson</code></li>
  <li><code class="language-plaintext highlighter-rouge">GNU autotools</code></li>
  <li>etc</li>
</ul>

<p>So, I then decided to use Autotools, because:</p>
<ul>
  <li>No dependency is needed (except dependency for the cgentest itself).</li>
  <li>I have used projects that utilize autotools many times in the past. Yet, never know how to use autotools in a project.</li>
</ul>

<p>The problem is, that autotools isn’t as easy to use as other modern build system.
There are not many resources to learn it on the internet too.
Most of it only explains the very simple usage or some pretty specific problem.
Although, in hindsight, most of it answered my project use case. 
But, at the time I still haven’t grasped the concept of autotools yet.</p>

<p>Fortunately, I found a great book that explains things in detail.
The book’s name is <code class="language-plaintext highlighter-rouge">Autotools</code> by John Calcote.
It’s a pretty good book, I spent several months reading it until I understood the basic concept of it.
I’m not claiming that I have mastered autotools, but it’s good enough to implement it in my project.</p>

<p>You know, people said that the best way to learn something is to learn by doing, so I did just that.
I decide to fully refactor the cgentest project to utilize <code class="language-plaintext highlighter-rouge">Autotools</code>.
Instead of using the git submodule and compiling the library together with the core code, I’m using shared linking libraries.
All three JSON libraries are supported for flexibility and use conditional compilation based on user choice.</p>

<p><img src="/assets/images/writing-cgentest/json_lib_diagram.png" alt="JSON libraries link flow" width="25%" /></p>

<p>The order by no means signifies anything.
It’s just the order of the implementation done in this project.</p>

<h2 id="putting-it-all-together">Putting it All Together</h2>

<p>Now that the cgentest is finished, let’s take a look at the complete product.
Given a C file with name <code class="language-plaintext highlighter-rouge">example.c</code></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">simple</span><span class="p">(</span><span class="n">bool</span> <span class="n">is_active</span><span class="p">)</span> <span class="p">{...}</span>
</code></pre></div></div>

<p>Run through cgentest, it will produce this result.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"example.c"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>

<span class="kt">void</span> <span class="nf">simple_test</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
        <span class="k">struct</span> <span class="p">{</span>
            <span class="n">bool</span> <span class="n">is_active</span><span class="p">;</span>
        <span class="p">}</span> <span class="n">parameters</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">expected</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">tests</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>

    <span class="p">};</span>

    <span class="kt">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Running simple_test: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">expected</span> <span class="o">==</span> <span class="n">simple</span><span class="p">(</span><span class="n">tests</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">parameters</span><span class="p">.</span><span class="n">is_active</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">=== Success ===</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">=== Failure ===</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>From there, we can add test case entres in the <code class="language-plaintext highlighter-rouge">tests</code> array. Pretty neat right?
As you can see, cgentest only generates a boilerplate.
I’ve stated it before, but let me reiterate. 
The table-driven test is a methodology, rather than a tool.
It helps to write flexible testing.</p>

<p>By default, cgentest uses a simple comparison.
But nothing stops a user from using a more sophisticated assertion library like <code class="language-plaintext highlighter-rouge">assert.h</code>.
It can even be used with any unit testing libraries.
Cgentest project utilizes <code class="language-plaintext highlighter-rouge">Autotest</code> for its unit testing library while using boilerplate generated by cgentest.
Here, <a href="https://github.com/alvinmatias69/cgentest/blob/master/tests/suites/util_test.c">check it out yourself</a>.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Now that the cgentest is finished, I’m very satisfied with the result.
In all honesty, the project is far from perfect. 
Now I look back at it again, I can think of several improvements that can be made.</p>
<ul>
  <li>Support for multiple file generation.</li>
  <li>Support for minimal dependencies, it’s possible only to depend on <code class="language-plaintext highlighter-rouge">ctags</code> and <code class="language-plaintext highlighter-rouge">libreadtags</code>.</li>
</ul>

<p>While working on cgentest, I’ve learned so many things.</p>
<ul>
  <li>How to use autotools suite.</li>
  <li>Utilize shared libraries.</li>
  <li>Debugging a C program using gdb.</li>
  <li>Checking memory leak using valgrind.</li>
</ul>

<p>For the next project will try to make something simple and short.
Either make a simple library to “complete” my journey of learning <code class="language-plaintext highlighter-rouge">Autotools</code>.
Or make an editor extension for cgentest, especially for emacs.</p>

<h1 id="recommended-resources">Recommended Resources</h1>

<p>Below are resources that are very useful through the writing of cgentest.</p>
<ul>
  <li>“Autotools, 2nd Edition: A Practitioner’s Guide to GNU Autoconf, Automake, and Libtool” book by John Calcote</li>
  <li>autotools gnu web documentation
    <ul>
      <li><a href="https://www.gnu.org/software/automake/">Automake</a></li>
      <li><a href="https://www.gnu.org/software/autoconf/">Autoconf</a></li>
      <li><a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Using-Autotest.html">Autotest</a></li>
    </ul>
  </li>
  <li>“How to Debug C Program using gdb in 6 Simple Steps” <a href="https://u.osu.edu/cstutorials/2018/09/28/how-to-debug-c-program-using-gdb-in-6-simple-steps/">blog</a> by Muhammed Emin Ozturk</li>
</ul>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Usually, I use the test-driven development (TDD) approach when I’m writing a software project. In Golang (the language that I used to write daily) there’s this neat library that helps me to do that, Gotests. Gotests is a simple tool that generates a table-driven test boilerplate, it helps me on writing tests on my past project. Unfortunately, I can’t find such a tool in C. While there are plenty of unit testing libraries, I’m unable to find the one that simply generates a Table-driven testing boilerplate. So, I decided to write one myself.]]></summary></entry><entry><title type="html">Reviving My Old Laptop</title><link href="/posts/laptop-revival" rel="alternate" type="text/html" title="Reviving My Old Laptop" /><published>2022-09-17T00:00:00+07:00</published><updated>2022-09-17T00:00:00+07:00</updated><id>/posts/laptop-revival</id><content type="html" xml:base="/posts/laptop-revival"><![CDATA[<p>Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?</p>

<!--more-->

<h1 id="background">Background</h1>

<p>The laptop in question is the first gadget that I bought with my own salary. It’s a MacBook Air from early 2015, I bought it back in college in 2017. I’m still a poor college student saving from my part-time jobs back then. For context, nowadays I mainly daily drive my desktop PC and use a company-issued laptop for work. So I’m in no dire need of a laptop, rather it’s more of the sentimental value of the laptop itself.</p>

<p>Also, I’ve encountered some blog posts about how Linus Torvalds is currently using an M2 MacBook with Fedora installed. So, I thought hey if the latest MacBook can run Linux then maybe my old laptop will have no problem. It should be a fun project to do at the weekend!</p>

<h2 id="problems">Problems</h2>

<p>Just as I stated, the laptop is old and kinda unusable in its current state.</p>

<h3 id="battery">Battery</h3>

<p>Most problems of old electronic lies in the battery. At the time, my laptop can only hold for about 10 minutes on battery. So if I want to use it, I need to connect to a wall plug all the time.</p>

<h3 id="storage">Storage</h3>

<p>My laptop only has 128Gb of storage. A “vanilla” macOS Big Sur installation takes about 40-50Gb of storage. Assume that additional basic software takes about 10Gb, it only leaves me with ~60Gb of storage. Not exactly that much by today’s standard.</p>

<h3 id="system-overall">System Overall</h3>

<p>At the time of this writing, macOS Big Sur is released two years <a href="https://en.wikipedia.org/wiki/MacOS_Big_Sur">ago</a> on 12 November 2020. While it still receives updates to this day, if someday Tim Apple decides to drop support for it my laptop is as good as a paperweight. Not to mention the performance is not the best. It’s kinda usable, but I’m not a fan of a laggy machine.</p>

<h1 id="its-revivin-time">It’s Revivin’ Time!</h1>

<p>After making sure that there are no important data saved (my brother was using my laptop for college for a while). I decided to fix the hardware issue first, the battery.</p>

<h2 id="a-new-battery">A New Battery</h2>

<p>Thankfully, the old gen MacBook is relatively easy to fix. A quick read at the iFixit <a href="https://www.ifixit.com/Device/MacBook_Air_13%22_Early_2015">website</a> and unsurprisingly the step is quite a simple DIY project. Unfortunately, looking for the replacement battery itself is not quite easy.</p>

<p>Because of the age of the laptop, looking for the original apple battery is out of the question (not to mention I don’t think they sell spare parts at all). My only choice is to look for an <a href="https://en.wikipedia.org/wiki/Original_equipment_manufacturer">OEM</a> battery from my local marketplace. Luckily for me, some online stores specialise in selling OEM laptop spare parts. After some days, the battery is arrived and ready.</p>

<p>The replacement itself is quite easy. It takes me about 15 minutes just by following instructions on the iFixit website. One thing to note though, apple (for whatever reason) doesn’t use your standard Phillips head screw. So you need a specialise screw to disassemble the laptop, fortunately, my replacement battery comes with the appropriate screwdriver, all good for me!</p>

<p>What I don’t expect is that battery calibration takes some time. It takes me about two days to complete 2 cycles of battery, so take this into the consideration.</p>

<h2 id="the-linux-strike-back">The Linux Strike Back</h2>

<p>I decided to go with <a href="https://spirallinux.github.io/">SpiralLinux</a> for the new OS. It’s a Linux distro based on Debian with some basic configurations and some non-free software and drivers. Truthfully, I’d like to go for Ubuntu if they don’t force snaps on their user. As for fedora, while I like the overall of it, it’s too cutting edge for my taste.</p>

<p>What surprised me is that the installation process itself is not that different from your everyday machine. After attaching the USB installation, I turn on my laptop while holding the <code class="language-plaintext highlighter-rouge">Option</code> key (this is how you choose the boot option on a mac) and then enter the live demo of SpiralLinux. After making sure that everything but the webcam (more on this later) works, I proceed with the installation.</p>

<p>Because I’m not planning to use the macOS anymore, I wipe the whole storage. Hence, the installation process is as simple as clicking next and filling out forms. When the installation is complete, I reboot my laptop and take out the installation USB. When the machine is up, I’m greeted by your standard lightDM login screen. The installation is a success! Surely, there won’t be any problem after this.</p>

<h2 id="return-of-the-problems">Return of the Problems</h2>

<p>Yeah, it’d be too naive to expect that there won’t be any problems. Most blogs that I read said that most likely I’ll encounter an issue with wireless connection. But, I’m able to connect to my home wifi easily. Both on the live USB and after the installation. I think the recent kernel has included the mac wifi driver in it.</p>

<h3 id="touchpad-not-working">Touchpad Not Working</h3>

<p>While on the live demo, I’m able to use the touchpad just fine. But, it’s not working (and not detected even) after the installation. Using an external mouse works just fine though. I suspect that somehow the driver for it is either not installed or configured incorrectly. Thankfully, updating (<code class="language-plaintext highlighter-rouge">apt update &amp;&amp; apt upgrade</code>) and restarting fixes the issue.</p>

<h3 id="webcam-not-working">Webcam Not Working</h3>

<p>I’ve mentioned it before, the webcam is not working at all. This is due to the webcam used by mac doesn’t use your daily standard driver (yeah, no surprise there). Thankfully, I stumbled upon the <a href="https://github.com/patjak/facetimehd/">facetimehd</a> repository by patjak. The repository contains an experimental driver for the MacBook webcam. The <a href="https://github.com/patjak/facetimehd/wiki/Installation">installation</a> process is quite straightforward, it works wonderfully. Besides known issues, I’ve not encountered any other problems.</p>

<h3 id="keyboard-layout">Keyboard Layout</h3>

<p>It’s not a problem per se, but rather a quality of life improvement. As we all know, apple (in their infinite wisdom and apple-centred design™) is using their own keyboard layout which is quite different from the standard keyboard layout. Thankfully (again), a user with the username free5lot has made a <a href="https://github.com/free5lot/hid-apple-patched">repository</a> for solving this “issue”. Goodbye apple-centred design™ layout, welcome sensible standard keyboard layout.</p>

<h2 id="the-config-menace">The Config Menace</h2>

<p>All problems are fixed, it’s time to configure the machine. Now, I’m the kind of guy that has different VM for different occasions. Be it work or personal projects. Hence, I have a pretty complete (for me personally) ansible playbook to be based on. So, configuring is as simple as <code class="language-plaintext highlighter-rouge">$ ansible-pull -U &lt;my_ansible_playbook_repo&gt;</code> for me. Then again, you might be too naive if you think that everything will work without any problems.</p>

<h3 id="the-problem-with-stable">The Problem with Stable</h3>

<p>Debian is stable, which means the available software might be months or even years behind the latest version. Most of the time this is not a problem, but rather an advantage. Because it’ll provide much more stability and fewer unknown issues. But, I forgot that my current project is using <a href="https://docs.gtk.org/gtk4/index.html">GTK4</a> which can be considered a new software and not available on Debian stable.</p>

<p>At this point, I have two options. One, compiling from source. This option is not exactly easy, as I need to compile the dependencies too. Also, gtk4 requires a recent version of Glibc. Which is not quite an easy feat to upgrade from the source. So I go with my second option, using the testing repository.</p>

<p>Debian has three different <a href="https://www.debian.org/doc/manuals/debian-faq/choosing.en.html">repositories</a>. The tl;dr is that new packages are first introduced to <code class="language-plaintext highlighter-rouge">unstable</code>. After some compiling and testing, it will move to <code class="language-plaintext highlighter-rouge">testing</code>. Finally, if all goes well, it will be moved to <code class="language-plaintext highlighter-rouge">stable</code>. Gtk4 is available on both testing and unstable repositories.</p>

<p>While it’s possible to wait until the package is introduced to stable, it’ll take a while. So, I should change the repository. Thankfully, SpiralLinux provides an out-of-the-box way to change <a href="https://github.com/SpiralLinux/SpiralLinux-project/wiki#switching-from-debian-stable-to-the-testing-or-unstable-branch">repository</a>. Though, it’ll take some times to migrate the repository. After it’s done I can install my required packages and finally, my machine is ready to use!</p>

<h1 id="afterword">Afterword</h1>

<p><img src="/assets/images/laptop-revival/macbook_linux.png" alt="My MacBook Linux Desktop" width="100%" /></p>

<p>Now, the storage usage is only about 14Gb, even after installing all of my additional software. The machine is also more snappy and doesn’t turn off without plugging into power. Even though the journey is not exactly smooth, I’m quite happy with the result. Not only the laptop is usable again, but I also learn so much while configuring it.</p>

<p>Well, I’m not exactly solved all of the problems. As currently, I’m not sure how to dispose of the old battery. I’ve found <code class="language-plaintext highlighter-rouge">octopus</code>, an Indonesian-based startup that handles e-waste. But, I haven’t tried it yet. Maybe I’ll make a review after trying it. In the meantime, please let me know if you have any information on e-waste disposal in Indonesia. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Nowadays, most people will choose to buy a new electronic device rather than fix their broken device. Most devices are difficult to fix and it’s not cheap either. Hence, most people might feel like it’s not worth fixing it. So, why do I choose to fix mine?]]></summary></entry><entry><title type="html">GTK4 Cursor Manipulation</title><link href="/posts/gtk4-cursor" rel="alternate" type="text/html" title="GTK4 Cursor Manipulation" /><published>2022-06-02T00:00:00+07:00</published><updated>2022-06-02T00:00:00+07:00</updated><id>/posts/gtk4-cursor</id><content type="html" xml:base="/posts/gtk4-cursor"><![CDATA[<p>A cursor can be used as a visual hint to users on how can they interact with an app. 
<!--more-->
For example, for a <code class="language-plaintext highlighter-rouge">pointer</code> cursor, it is implied that an element is clickable. 
<code class="language-plaintext highlighter-rouge">Progress</code> cursor indicates that the application is currently working, and the user should wait.</p>

<p>In this post, we’ll look at various method we can use to modify cursor in GTK4.</p>

<h2 id="change-cursor-on-hover">Change Cursor on Hover</h2>

<p>This usecase is used to give users a hint on how they can interact with an application element. In example <code class="language-plaintext highlighter-rouge">pointer</code> cursor over a button, <code class="language-plaintext highlighter-rouge">text</code> cursor over a text input, and so on.</p>

<p>Thankfully, unlike in GTK3, we can invoke a function call to set this instead of setting up the event manually. We have two functions for this:</p>
<ul>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor.html">gtk_widget_set_cursor</a></li>
  <li><a href="https://docs.gtk.org/gtk4/method.Widget.set_cursor_from_name.html">gtk_widget_set_cursor_from_name</a></li>
</ul>

<h3 id="gtk_widget_set_cursor">gtk_widget_set_cursor</h3>

<p>This function took 2 parameters. Widget pointer and cursor object. 
The Widget parameter is straightforward, it is the widget that we are going to give the hover cursor.
The cursor parameter is a gdk object and it is nullable. In case the parameter is null, it will use the default cursor.</p>

<p>Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me"</span><span class="p">);</span>
<span class="n">GdkCursor</span> <span class="o">*</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">gdk_cursor_new_from_name</span><span class="p">(</span><span class="s">"pointer"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="n">cursor</span><span class="p">);</span>
</code></pre></div></div>

<p>Above, we created a new button and cursor. 
The cursor is a gdk object with a pointer as the cursor. 
You can refer to the <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_name.html">gdk documentation</a> for the list of available cursor names. 
Alternatively, you can use a custom image as a cursor with <a href="https://docs.gtk.org/gdk4/ctor.Cursor.new_from_texture.html">gdk_cursor_new_from_texture</a>.</p>

<blockquote>
  <p>Note: if you are developing in <a href="https://wiki.gnome.org/Apps/Builder">Gnome Builder</a> the cursor might not be changed if you run your project using the gui apps (<code class="language-plaintext highlighter-rouge">ctrl+f5</code>).
You need to export the bundle and then run it manually (or install the exported flatpak project first) to make it work.</p>
</blockquote>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor.mp4" type="video/mp4" />
</video>

<p>As you can see the cursor is automatically changed to pointer once it’s hovering on the button. In the next section, we’ll look at how to simplify this process even more.</p>

<h3 id="gtk_widget_set_cursor_from_name">gtk_widget_set_cursor_from_name</h3>

<p>GTK has provided us with a shortcut for the above snippet. Take a look at the below snippet:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="n">gtk_button_new_with_label</span><span class="p">(</span><span class="s">"hover me simple"</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">btn</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">gtk_widget_set_cursor_from_name</code> we can simply provide the cursor type name, without any need to create the cursor object ourselves.
Take note that the cursor name is nullable. In this case, the widget will use the cursor inherited from the parent widget.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/cursor_with_name.mp4" type="video/mp4" />
</video>

<h2 id="change-cursor-for-window">Change Cursor for Window</h2>

<p>In GTK3 we have <a href="https://docs.gtk.org/gdk3/method.Window.set_cursor.html">gdk_window_set_cursor</a> which will change the cursor for a given window.
It’s been <a href="https://docs.gtk.org/gtk4/migrating-3to4.html#adapt-to-cursor-api-changes">deprecated</a> in GTK4. Instead, we can use the function above by passing the window as our widget.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GtkWidget</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="n">gtk_application_window_new</span> <span class="p">(</span><span class="n">app</span><span class="p">);</span>
<span class="n">gtk_widget_set_cursor_from_name</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s">"pointer"</span><span class="p">);</span>
</code></pre></div></div>

<p>As you can see, there’s no different than the previous snippet. The only difference is that we pass the window as a widget in exchange for the previous button.</p>

<video autoplay="autoplay" loop="loop" width="60%" height="auto" controls="">
    <source src="/assets/videos/gtk4_cursors/window.mp4" type="video/mp4" />
</video>

<hr />

<p>To be completely honest, I choose this topic because I have spent hours debugging my project. 
Before I realize that the cursor won’t be changed if you run it inside the gnome-builder lol.
Hopefully, this post can help you to avoid repeating my mistake. See you in another post!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[A cursor can be used as a visual hint to users on how can they interact with an app.]]></summary></entry><entry><title type="html">Hello World!</title><link href="/posts/hello-world" rel="alternate" type="text/html" title="Hello World!" /><published>2022-05-29T00:00:00+07:00</published><updated>2022-05-29T00:00:00+07:00</updated><id>/posts/hello-world</id><content type="html" xml:base="/posts/hello-world"><![CDATA[<p>Welcome to my blog’s first post!
<!--more--></p>

<p>I was working on my project the other day. I’m working on a desktop GUI project, which is not as popular as a web project nowadays. As a result, there are not that many online sources that I can refer to while working on it (not to mention the official documentation is not that good). So I was thinking, hey I should write this up so I can help my future self. While I’m at it I also think that writing it in a blog maybe is not a bad idea!</p>

<p>As you can see, my blog is a bit bare. I’m inspired by <a href="https://motherfuckingwebsite.com/">this website</a> for the design. Also, because it’s mainly just for my note I think it’s good to keep things simple and lightweight. Please let me know if you have any suggestions!</p>

<p>For now, I plan to write some posts related to desktop GUI software. More specifically on GTK and C. Please note that I’m not a professional C engineer by any means (I write java for a living, like your everyday software engineer). So, I’m sorry if most of my post only consists of surface-level knowledge or even contains any errors. Please let me know if that happened. You can send me an <a href="mailto:contact@matiasalvin.dev">email</a> or contact me on my socials.</p>

<p>So, as I’ve already mentioned. This blog will be mainly used as my notes on my software engineer journeys. Also, I’m not a native speaker. Hopefully, by writing a lot of English I can be better at my English. Thank you, and I hope you enjoy your stay here!</p>]]></content><author><name>mat</name></author><summary type="html"><![CDATA[Welcome to my blog’s first post!]]></summary></entry></feed>